diff --git a/.babelrc b/.babelrc
index e1f3fc1..081c354 100644
--- a/.babelrc
+++ b/.babelrc
@@ -1,5 +1,8 @@
 {
-  "plugins": ["@babel/plugin-proposal-class-properties"],
+  "plugins": [
+  ["@babel/plugin-transform-class-properties", { "loose": true }],
+  "@babel/plugin-transform-optional-chaining"
+],
   "presets": [
     "@babel/preset-typescript",
     [
diff --git a/.github/workflows/nodejs.yml b/.github/workflows/nodejs.yml
index b328240..102ba51 100644
--- a/.github/workflows/nodejs.yml
+++ b/.github/workflows/nodejs.yml
@@ -13,7 +13,7 @@ jobs:
 
     strategy:
       matrix:
-        node-version: [12.x]
+        node-version: [20.x]
 
     steps:
     - uses: actions/checkout@v1
@@ -26,6 +26,7 @@ jobs:
         npm install
         npm run build
         npm run test
-        npm run report-coverage
       env:
         CI: true
+    - name: Upload coverage to Codecov
+      uses: codecov/codecov-action@v3
diff --git a/.github/workflows/npmpublish.yml b/.github/workflows/npmpublish.yml
index 0159c40..44a47a4 100644
--- a/.github/workflows/npmpublish.yml
+++ b/.github/workflows/npmpublish.yml
@@ -12,7 +12,7 @@ jobs:
 
     strategy:
       matrix:
-        node-version: [12.x]
+        node-version: [20.x]
 
     steps:
     - uses: actions/checkout@v1
@@ -35,14 +35,24 @@ jobs:
     - uses: actions/checkout@v1
     - uses: actions/setup-node@v1
       with:
-        node-version: 12
+        node-version: 20
         registry-url: https://registry.npmjs.org/
     - name: NPM Publish
       run: |
         npm install
         npm run build
         npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
-        npm publish        
+        # print the NPM user name for validation
+        npm whoami
+        VERSION=$(node -p "require('./package.json').version" )
+        # Only publish stable versions to the latest tag
+        if [[ "$VERSION" =~ ^[^-]+$ ]]; then
+          NPM_TAG="latest"
+        else
+          NPM_TAG="beta"
+        fi
+        echo "Publishing $VERSION with $NPM_TAG tag."
+        npm publish --tag $NPM_TAG --access public
       env:
         NODE_AUTH_TOKEN: ${{secrets.npm_token}}
         CI: true
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index 48d5826..9361b82 100644
--- a/.gitignore
+++ b/.gitignore
@@ -7,4 +7,5 @@ dist
 .nyc_output
 coverage.lcov
 coverage
-out-tsc
\ No newline at end of file
+out-tsc
+docs
\ No newline at end of file
diff --git a/.mocharc.json b/.mocharc.json
index b758d0a..b06f6a6 100644
--- a/.mocharc.json
+++ b/.mocharc.json
@@ -1,6 +1,6 @@
 {
   "coverage": true,
-  "require": ["esm", "./babel-register.js"],
+  "require": ["./babel-register.js"],
   "exit": true,
   "timeout": "40000"
-}
\ No newline at end of file
+}
diff --git a/.npmignore b/.npmignore
new file mode 100644
index 0000000..483a9c4
--- /dev/null
+++ b/.npmignore
@@ -0,0 +1 @@
+package-lock.json
\ No newline at end of file
diff --git a/README.md b/README.md
index d522861..dfe276c 100644
--- a/README.md
+++ b/README.md
@@ -2,540 +2,37 @@
 
 # ImageKit.io JavaScript SDK
 
-![gzip size](https://img.badgesize.io/https://unpkg.com/imagekit-javascript/dist/imagekit.min.js?compression=gzip&label=gzip)
-![brotli size](https://img.badgesize.io/https://unpkg.com/imagekit-javascript/dist/imagekit.min.js?compression=brotli&label=brotli)
+![gzip size](https://img.badgesize.io/https://unpkg.com/@imagekit/javascript/dist/imagekit.min.js?compression=gzip&label=gzip)
+![brotli size](https://img.badgesize.io/https://unpkg.com/@imagekit/javascript/dist/imagekit.min.js?compression=brotli&label=brotli)
 ![Node CI](https://github.com/imagekit-developer/imagekit-javascript/workflows/Node%20CI/badge.svg)
-[![npm version](https://img.shields.io/npm/v/imagekit-javascript)](https://www.npmjs.com/package/imagekit-javascript) 
+[![npm version](https://img.shields.io/npm/v/@imagekit/javascript)](https://www.npmjs.com/package/@imagekit/javascript) 
 [![codecov](https://codecov.io/gh/imagekit-developer/imagekit-javascript/branch/master/graph/badge.svg)](https://codecov.io/gh/imagekit-developer/imagekit-javascript)
 [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
 [![Twitter Follow](https://img.shields.io/twitter/follow/imagekitio?label=Follow&style=social)](https://twitter.com/ImagekitIo)
 
-A lightweight JavaScript SDK for generating image and video URLs with transformations, and for uploading files directly from the browser to ImageKit. This SDK is intended for use in the browser only. For Node.js, please refer to our official [Node.js SDK](https://github.com/imagekit-developer/imagekit-nodejs).
+This lightweight, dependency-free JavaScript SDK is designed specifically for browser use. It provides utility functions to generate image and video `src` URLs using [ImageKit transformations](https://imagekit.io/docs/transformations) and to upload files to the ImageKit media library.
 
-## Table of Contents
-- [Installation](#installation)
-- [Initialization](#initialization)
-- [URL Generation](#url-generation)
-  - [Basic URL Generation](#basic-url-generation)
-  - [Advanced URL Generation Examples](#advanced-url-generation-examples)
-    - [Chained Transformations](#chained-transformations)
-    - [Overlays and Effects](#overlays-and-effects)
-    - [AI and Advanced Transformations](#ai-and-advanced-transformations)
-    - [Arithmetic Expressions in Transformations](#arithmetic-expressions-in-transformations)
-  - [Supported Transformations](#supported-transformations)
-  - [Handling Unsupported Transformations](#handling-unsupported-transformations)
-- [File Upload](#file-upload)
-  - [Basic Upload Example](#basic-upload-example)
-  - [Promise-based Upload Example](#promise-based-upload-example)
-- [Test Examples](#test-examples)
-- [Changelog](#changelog)
+For server-side applications with Node.js, please refer to our official [Node.js SDK](https://github.com/imagekit-developer/imagekit-nodejs).
 
 ## Installation
 
-### Using npm
-Install the SDK via npm:
-```bash
-npm install imagekit-javascript --save
-# or
-yarn add imagekit-javascript
-```
-
-Then import ImageKit:
-```js
-import ImageKit from "imagekit-javascript";
-// or with CommonJS:
-const ImageKit = require("imagekit-javascript");
-```
-
-### Using CDN
-You can also use the global CDN:
-
-Download a specific version:
-```
-https://unpkg.com/imagekit-javascript@1.3.0/dist/imagekit.min.js
-```
-Or for the latest version, remove the version number (don't use in production as it may break your code if a new major version is released):
-```
-https://unpkg.com/imagekit-javascript/dist/imagekit.min.js
-```
-
-And include it in your HTML:
-```html
-<script type="text/javascript" src="https://unpkg.com/imagekit-javascript/dist/imagekit.min.js"></script>
-```
-
-## Initialization
-To use the SDK, initialize it with your ImageKit URL endpoint. You can get the URL endpoint [here](https://imagekit.io/dashboard/url-endpoints) and your public API key from the [developer section](https://imagekit.io/dashboard/developer/api-keys):
-
-```js
-var imagekit = new ImageKit({
-    urlEndpoint: "https://ik.imagekit.io/your_imagekit_id", // Required
-    transformationPosition: "query", // Optional, defaults to "query"
-    publicKey: "your_public_api_key", // Optional, required only for client-side file uploads
-});
-```
-
-> Note: Never include your private API key in client-side code. The SDK will throw an error if you do.
-
-### Initialization Options
-
-| Option                 | Description                                                                                                                                                                                                                                         | Example                                         |
-| ---------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------- |
-| urlEndpoint            | Required. Your ImageKit URL endpoint or custom domain.                                                                                                                                                                                              | `urlEndpoint: "https://ik.imagekit.io/your_id"` |
-| transformationPosition | Optional. Specifies whether transformations are added as URL path segments (`path`) or query parameters (`query`). The default is `query`, which allows you to perform wildcard purges and remove all generated transformations from the CDN cache. | `transformationPosition: "query"`               |
-| publicKey              | Optional. Your public API key for client-side uploads.                                                                                                                                                                                              | `publicKey: "your_public_api_key"`              |
-
-
-## URL Generation
-
-The SDK’s `.url()` method enables you to generate optimized image and video URLs with a variety of transformations.
-
-The method accepts an object with the following parameters:
-
-| Option          | Description                                                                                                                                                                                                            | Example                                                       |
-| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------- |
-| path            | The relative path of the image. Either `src` or `path` must be provided.                                                                                                                                               | `"/path/to/image.jpg"`                                        |
-| src             | The full URL of an image already mapped to ImageKit. Either `src` or `path` must be provided.                                                                                                                          | `"https://ik.imagekit.io/your_imagekit_id/path/to/image.jpg"` |
-| transformation  | An array of objects specifying the transformations to be applied in the URL. Each object contains key-value pairs representing transformation parameters. See [supported transformations](#supported-transformations). | `[ { width: 300, height: 400 } ]`                             |
-| queryParameters | Additional query parameters to be appended to the URL.                                                                                                                                                                 | `{ v: 1 }`                                                    |
-
-Optionally, you can include `transformationPosition` and `urlEndpoint` in the object to override the initialization settings for a specific `.url()` call.
-
-### Basic URL Generation
-
-*A simple height and width transformation:*
-
-```js
-var imageURL = imagekit.url({
-    path: "/default-image.jpg",
-    urlEndpoint: "https://ik.imagekit.io/your_imagekit_id/endpoint/",
-    transformation: [{
-        height: 300,
-        width: 400
-    }]
-});
-```
-
-*Result Example:*
-```
-https://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg?tr=h-300,w-400
-```
-
-SDK automatically generates the URL based on the provided parameters. The generated URL includes the base URL, path, and transformation parameters.
-
-### Advanced URL Generation Examples
-
-#### Chained Transformations
-Apply multiple transformations by passing an array:
-```js
-var imageURL = imagekit.url({
-    path: "/default-image.jpg",
-    transformation: [{
-        height: 300,
-        width: 400
-    }, {
-        rotation: 90
-    }],
-});
-```
-
-*Result Example:*
-```
-https://ik.imagekit.io/your_imagekit_id/default-image.jpg?tr=h-300,w-400:rt-90
-```
-
-#### Overlays and Effects
-*Text Overlay Example:*
-```js
-var imageURL = imagekit.url({
-    src: "https://ik.imagekit.io/your_imagekit_id/default-image.jpg",
-    transformation: [{
-        width: 400,
-        height: 300,
-        overlay: {
-            text: "Imagekit",
-            fontSize: 50,
-            color: "red",
-            position: {
-                x: 10,
-                y: 20
-            }
-        }
-    }]
-});
-```
-
-*Image Overlay Example:*
-
-```js
-var imageURL = imagekit.url({
-    src: "https://ik.imagekit.io/your_imagekit_id/default-image.jpg",
-    transformation: [{
-        width: 400,
-        height: 300,
-        overlay: {
-            type: "image",
-            input: "logo.png",
-            transformation: [{
-                width: 100,
-                border: "10_CDDC39"
-            }],
-            position: {
-                focus: "top_left"
-            }
-        }
-    }]
-});
-```
-
-*Video Overlay Example:*
+You can install the SDK in your project using npm or yarn.
 
-```js
-var videoOverlayURL = imagekit.url({
-    src: "https://ik.imagekit.io/your_imagekit_id/base-video.mp4",
-    transformation: [{
-        overlay: {
-            type: "video",
-            input: "overlay-video.mp4",
-            position: { 
-                x: "10", 
-                y: "20" 
-            },
-            timing: { 
-                start: 5, 
-                duration: 10 
-            }
-        }
-    }]
-});
-```
-
-*Subtitle Overlay Example:*
-
-```js
-var subtitleOverlayURL = imagekit.url({
-    src: "https://ik.imagekit.io/your_imagekit_id/base-video.mp4",
-    transformation: [{
-        overlay: {
-            type: "subtitle",
-            input: "subtitle.vtt",
-            transformation: [{
-                fontSize: 16,
-                fontFamily: "Arial"
-            }],
-            position: { 
-                focus: "bottom" 
-            },
-            timing: { 
-                start: 0, 
-                duration: 5 
-            }
-        }
-    }]
-});
-```
-
-*Solid Color Overlay Example:*
-```js
-var solidColorOverlayURL = imagekit.url({
-    src: "https://ik.imagekit.io/your_imagekit_id/base-image.jpg",
-    transformation: [{
-        overlay: {
-            type: "solidColor",
-            color: "FF0000",
-            transformation: [{
-                width: 100,
-                height: 50,
-                alpha: 5
-            }],
-            position: { x: 20, y: 20 }
-        }
-    }]
-});
-```
-
-##### Overlay Options
-
-ImageKit supports various overlay types, including text, image, video, subtitle, and solid color overlays. Each overlay type has specific configuration options to customize the overlay appearance and behavior. To learn more about how overlays work, refer to the [ImageKit documentation](https://imagekit.io/docs/transformations#overlay-using-layers).
-
-The table below outlines the available overlay configuration options:
-
-| Option         | Description                                                                                                                                                                                                                                                                                                                                                                                                      | Example                                                         |
-| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------- |
-| type           | Specifies the type of overlay. Supported values: `text`, `image`, `video`, `subtitle`, `solidColor`.                                                                                                                                                                                                                                                                                                             | `type: "text"`                                                  |
-| text           | (For text overlays) The text content to display.                                                                                                                                                                                                                                                                                                                                                                 | `text: "ImageKit"`                                              |
-| input          | (For image, video, or subtitle overlays) Relative path to the overlay asset.                                                                                                                                                                                                                                                                                                                                     | `input: "logo.png"` or `input: "overlay-video.mp4"`             |
-| color          | (For solidColor overlays) RGB/RGBA hex code or color name for the overlay color.                                                                                                                                                                                                                                                                                                                                 | `color: "FF0000"`                                               |
-| encoding       | Accepted values: `auto`, `plain`, `base64`. [Check this](#encoding-options) for more details.                                                                                                                                                                                                                                                                                                                    | `encoding: "auto"`                                              |
-| transformation | An array of transformation objects to style the overlay. <br> - [Text Overlay Transformations](#text-overlay-transformations) <br> - [Subtitle Overlay Transformations](#subtitle-overlay-transformations) <br> - Image and video overlays support most [transformations](#supported-transformations). <br> See [ImageKit docs](https://imagekit.io/docs/transformations#overlay-using-layers) for more details. | `transformation: [{ fontSize: 50 }]`                            |
-| position       | Sets the overlay’s position relative to the base asset. Accepts an object with `x`, `y`, or `focus`. The `focus` value can be one of: `center`, `top`, `left`, `bottom`, `right`, `top_left`, `top_right`, `bottom_left`, or `bottom_right`.                                                                                                                                                                     | `position: { x: 10, y: 20 }` or `position: { focus: "center" }` |
-| timing         | (For video base) Specifies when the overlay appears using `start`, `duration`, and `end` (in seconds); if both `duration` and `end` are set, `duration` is ignored.                                                                                                                                                                                                                                              | `timing: { start: 5, duration: 10 }`                            |
-
-##### Encoding Options
-
-Overlay encoding options define how the overlay input is converted for URL construction. When set to `auto`, the SDK automatically determines whether to use plain text or Base64 encoding based on the input content.
-
-For text overlays:
-- If `auto` is used, the SDK checks the text overlay input: if it is URL-safe, it uses the format `i-{input}` (plain text); otherwise, it applies Base64 encoding with the format `ie-{base64_encoded_input}`.
-- You can force a specific method by setting encoding to `plain` (always use `i-{input}`) or `base64` (always use `ie-{base64}`).
-- Note: In all cases, the text is percent-encoded to ensure URL safety.
-
-For image, video, and subtitle overlays:
-- The input path is processed by removing any leading/trailing slashes and replacing inner slashes with `@@` when `plain` is used.
-- Similarly, if `auto` is used, the SDK determines whether to apply plain text or Base64 encoding based on the characters present.
-- For explicit behavior, use `plain` or `base64` to enforce the desired encoding.
-
-Use `auto` for most cases to let the SDK optimize encoding, and use `plain` or `base64` when a specific encoding method is required.
-
-##### Solid Color Overlay Transformations
-
-| Option | Description                                                                                                                        | Example         |
-| ------ | ---------------------------------------------------------------------------------------------------------------------------------- | --------------- |
-| width  | Specifies the width of the solid color overlay block (in pixels or as an arithmetic expression).                                   | `width: 100`    |
-| height | Specifies the height of the solid color overlay block (in pixels or as an arithmetic expression).                                  | `height: 50`    |
-| radius | Specifies the corner radius of the solid color overlay block or shape. Can be a number or `"max"` for circular/oval shapes.        | `radius: "max"` |
-| alpha  | Specifies the transparency level of the solid color overlay. Supports integers from 1 (most transparent) to 9 (least transparent). | `alpha: 5`      |
-
-##### Text Overlay Transformations
-
-| Option         | Description                                                                                                                                                              | Example                    |
-| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------- |
-| width          | Specifies the maximum width (in pixels) of the overlaid text. The text wraps automatically, and arithmetic expressions are supported (e.g., `bw_mul_0.2` or `bh_div_2`). | `width: 400`               |
-| fontSize       | Specifies the font size of the overlaid text. Accepts a numeric value or an arithmetic expression.                                                                       | `fontSize: 50`             |
-| fontFamily     | Specifies the font family of the overlaid text. Choose from the supported fonts or provide a custom font.                                                                | `fontFamily: "Arial"`      |
-| fontColor      | Specifies the font color of the overlaid text. Accepts an RGB hex code, an RGBA code, or a standard color name.                                                          | `fontColor: "FF0000"`      |
-| innerAlignment | Specifies the inner alignment of the text when it doesn’t occupy the full width. Supported values: `left`, `right`, `center`.                                            | `innerAlignment: "center"` |
-| padding        | Specifies the padding around the text overlay. Can be a single integer or multiple values separated by underscores; arithmetic expressions are accepted.                 | `padding: 10`              |
-| alpha          | Specifies the transparency level of the text overlay. Accepts an integer between `1` and `9`.                                                                            | `alpha: 5`                 |
-| typography     | Specifies the typography style of the text. Supported values: `b` for bold, `i` for italics, and `b_i` for bold with italics.                                            | `typography: "b"`          |
-| background     | Specifies the background color of the text overlay. Accepts an RGB hex code, an RGBA code, or a color name.                                                              | `background: "red"`        |
-| radius         | Specifies the corner radius of the text overlay. Accepts a numeric value or `max` for circular/oval shape.                                                               | `radius: "max"`            |
-| rotation       | Specifies the rotation angle of the text overlay. Accepts a numeric value for clockwise rotation or a string prefixed with `N` for counterclockwise rotation.            | `rotation: 90`             |
-| flip           | Specifies the flip option for the text overlay. Supported values: `h`, `v`, `h_v`, `v_h`.                                                                                | `flip: "h"`                |
-| lineHeight     | Specifies the line height for multi-line text. Accepts a numeric value or an arithmetic expression.                                                                      | `lineHeight: 1.5`          |
-
-##### Subtitle Overlay Transformations
-
-| Option      | Description                                                                                               | Example                 |
-| ----------- | --------------------------------------------------------------------------------------------------------- | ----------------------- |
-| background  | Specifies the subtitle background color using a standard color name, RGB color code, or RGBA color code.  | `background: "blue"`    |
-| fontSize    | Sets the font size of subtitle text.                                                                      | `fontSize: 16`          |
-| fontFamily  | Sets the font family of subtitle text.                                                                    | `fontFamily: "Arial"`   |
-| color       | Specifies the font color of subtitle text using standard color name, RGB, or RGBA color code.             | `color: "FF0000"`       |
-| typography  | Sets the typography style of subtitle text. Supported values: `b`, `i`, `b_i`.                            | `typography: "b"`       |
-| fontOutline | Specifies the font outline for subtitles. Requires an outline width and color separated by an underscore. | `fontOutline: "2_blue"` |
-| fontShadow  | Specifies the font shadow for subtitles. Requires shadow color and indent separated by an underscore.     | `fontShadow: "blue_2"`  |
-
-#### AI and Advanced Transformations
-*Background Removal:*
-```js
-var imageURL = imagekit.url({
-  path: "/sample-image.jpg",
-  transformation: [{
-    aiRemoveBackground: true
-  }]
-});
-```
-*Upscaling:*
-```js
-var upscaledURL = imagekit.url({
-  path: "/sample-image.jpg",
-  transformation: [{
-    aiUpscale: true
-  }]
-});
-```
-*Drop Shadow:*
-```js
-var dropShadowURL = imagekit.url({
-  path: "/sample-image.jpg",
-  transformation: [{
-    aiDropShadow: "az-45"
-  }]
-});
-```
-
-#### Arithmetic Expressions in Transformations
-```js
-var imageURL = imagekit.url({
-    src: "https://ik.imagekit.io/your_imagekit_id/default-image.jpg",
-    transformation: [{
-        width: "iw_div_4",
-        height: "ih_div_2",
-        border: "cw_mul_0.05_yellow"
-    }]
-});
-```
-
-### Supported Transformations
-
-The SDK gives a name to each transformation parameter (e.g. `height` maps to `h`, `width` maps to `w`). If the property does not match any of the following supported options, it is added as is.
-
-If you want to generate transformations without any modifications, use the `raw` parameter.
-
-Check ImageKit [transformation documentation](https://imagekit.io/docs/transformations) for more details.
-
-| Transformation Name        | URL Parameter                                                                                  |
-| -------------------------- | ---------------------------------------------------------------------------------------------- |
-| width                      | w                                                                                              |
-| height                     | h                                                                                              |
-| aspectRatio                | ar                                                                                             |
-| quality                    | q                                                                                              |
-| aiRemoveBackground         | e-bgremove (ImageKit powered)                                                                  |
-| aiRemoveBackgroundExternal | e-removedotbg (Using third party)                                                              |
-| aiUpscale                  | e-upscale                                                                                      |
-| aiRetouch                  | e-retouch                                                                                      |
-| aiVariation                | e-genvar                                                                                       |
-| aiDropShadow               | e-dropshadow                                                                                   |
-| aiChangeBackground         | e-changebg                                                                                     |
-| crop                       | c                                                                                              |
-| cropMode                   | cm                                                                                             |
-| x                          | x                                                                                              |
-| y                          | y                                                                                              |
-| xCenter                    | xc                                                                                             |
-| yCenter                    | yc                                                                                             |
-| focus                      | fo                                                                                             |
-| format                     | f                                                                                              |
-| radius                     | r                                                                                              |
-| background                 | bg                                                                                             |
-| border                     | b                                                                                              |
-| rotation                   | rt                                                                                             |
-| blur                       | bl                                                                                             |
-| named                      | n                                                                                              |
-| dpr                        | dpr                                                                                            |
-| progressive                | pr                                                                                             |
-| lossless                   | lo                                                                                             |
-| trim                       | t                                                                                              |
-| metadata                   | md                                                                                             |
-| colorProfile               | cp                                                                                             |
-| defaultImage               | di                                                                                             |
-| original                   | orig                                                                                           |
-| videoCodec                 | vc                                                                                             |
-| audioCodec                 | ac                                                                                             |
-| grayscale                  | e-grayscale                                                                                    |
-| contrastStretch            | e-contrast                                                                                     |
-| shadow                     | e-shadow                                                                                       |
-| sharpen                    | e-sharpen                                                                                      |
-| unsharpMask                | e-usm                                                                                          |
-| gradient                   | e-gradient                                                                                     |
-| flip                       | fl                                                                                             |
-| opacity                    | o                                                                                              |
-| zoom                       | z                                                                                              |
-| page                       | pg                                                                                             |
-| startOffset                | so                                                                                             |
-| endOffset                  | eo                                                                                             |
-| duration                   | du                                                                                             |
-| streamingResolutions       | sr                                                                                             |
-| overlay                    | Generates the correct layer syntax for image, video, text, subtitle, and solid color overlays. |
-| raw                        | The string provided in raw will be added in the URL as is.                                     |
-
-### Handling Unsupported Transformations
-
-If you specify a transformation parameter that is not explicitly supported by the SDK, it is added “as-is” in the generated URL. This provides flexibility for using new or custom transformations without waiting for an SDK update.
-
-For example:
-```js
-var imageURL = imagekit.url({
-    path: "/test_path.jpg",
-    transformation: [{
-        newparam: "cool"
-    }]
-});
-// Generated URL: https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=newparam-cool
+```bash
+npm install @imagekit/javascript
 ```
 
-## File Upload
-
-The SDK offers a simple interface via the `.upload()` method to upload files to the ImageKit Media Library. This method requires the following:
-- **file** (mandatory)
-- **fileName** (mandatory)
-- Security parameters: **signature**, **token**, and **expire**
-
-Before invoking the upload, generate the necessary security parameters as per the [ImageKit Upload API documentation](https://imagekit.io/docs/api-reference/upload-file/upload-file#how-to-implement-client-side-file-upload).
+## TypeScript support
 
-### Upload Options
-| Option                  | Description                                                                                                                                             | Example                                                  |
-| ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------- |
-| file                    | The file content to be uploaded. Accepts binary, base64 string, or URL.                                                                                 | `file: fileInput.files[0]`                               |
-| fileName                | The name to assign to the uploaded file. Supports alphanumeric characters, dot, underscore, and dash.                                                   | `fileName: "myImage.jpg"`                                |
-| signature               | HMAC-SHA1 digest computed using the private API key. Must be calculated on the server side.                                                             | `signature: "generated_signature"`                       |
-| token                   | A unique token to prevent duplicate upload retries. Typically a V4 UUID or similar unique string.                                                       | `token: "unique_upload_token"`                           |
-| expire                  | Unix timestamp (in seconds) indicating the signature expiry time (should be within 1 hour).                                                             | `expire: 1616161616`                                     |
-| useUniqueFileName       | Boolean flag to automatically generate a unique filename if set to true. Defaults to true.                                                              | `useUniqueFileName: true`                                |
-| folder                  | The folder path where the file will be uploaded. Automatically creates nested folders if they don’t exist.                                              | `folder: "/images/uploads"`                              |
-| isPrivateFile           | Boolean to mark the file as private, restricting access to the original file URL. Defaults to false.                                                    | `isPrivateFile: false`                                   |
-| tags                    | Tags to associate with the file. Can be a comma-separated string or an array of tags.                                                                   | `tags: "summer,holiday"` or `tags: ["summer","holiday"]` |
-| customCoordinates       | Specifies an area of interest in the image formatted as `x,y,width,height`.                                                                             | `customCoordinates: "10,10,100,100"`                     |
-| responseFields          | Comma-separated list of fields to include in the upload response.                                                                                       | `responseFields: "tags,customCoordinates"`               |
-| extensions              | Array of extension objects for additional image processing.                                                                                             | `extensions: [{ name: "auto-tagging" }]`                 |
-| webhookUrl              | URL to which the final status of extension processing will be sent.                                                                                     | `webhookUrl: "https://example.com/webhook"`              |
-| overwriteFile           | Boolean flag indicating whether to overwrite a file if it exists. Defaults to true.                                                                     | `overwriteFile: true`                                    |
-| overwriteAITags         | Boolean flag to remove AITags from a file if overwritten. Defaults to true.                                                                             | `overwriteAITags: true`                                  |
-| overwriteTags           | Boolean flag that determines if existing tags should be removed when new tags are not provided. Defaults to true when file is overwritten without tags. | `overwriteTags: true`                                    |
-| overwriteCustomMetadata | Boolean flag dictating if existing custom metadata should be removed when not provided. Defaults to true under similar conditions as tags.              | `overwriteCustomMetadata: true`                          |
-| customMetadata          | Stringified JSON or an object containing custom metadata key-value pairs to associate with the file.                                                    | `customMetadata: {author: "John Doe"}`                   |
-| transformation          | Optional transformation object to apply during the upload process. It follows the same structure as in URL generation.                                  | `transformation: { pre: "w-200,h-200", post: [...] }`    |
-| xhr                     | An optional XMLHttpRequest object provided to monitor upload progress.                                                                                  | `xhr: new XMLHttpRequest()`                              |
-| checks                  | Optional string value for specifying server-side checks to run before file upload.                                                                      | `checks: "file.size' < '1MB'"`                           |
+The SDK is written in TypeScript, offering first-class TypeScript support. Enjoy excellent type safety and IntelliSense in your IDE. You can use it in your TypeScript projects without any additional configuration.
 
-### Basic Upload Example
 
-Below is an HTML form example that uses a callback for handling the upload response:
-
-```html
-<form action="#" onsubmit="upload(); return false;">
-    <input type="file" id="file1" />
-    <input type="submit" />
-</form>
-<script src="../dist/imagekit.js"></script>
-<script>
-    var imagekit = new ImageKit({
-        publicKey: "your_public_api_key",
-        urlEndpoint: "https://ik.imagekit.io/your_imagekit_id",
-    });
-    
-    function upload() {
-        var file = document.getElementById("file1");
-        imagekit.upload({
-            file: file.files[0],
-            fileName: "abc1.jpg",
-            token: 'generated_token',
-            signature: 'generated_signature',
-            expire: 'generated_expire'
-        }, function(err, result) {
-            if(err){
-                console.error(err);
-            } else {
-                console.log(result);
-            }
-        });
-    }
-</script>
-```
-
-### Promise-based Upload Example
-
-You can also use promises for a cleaner asynchronous approach:
-```js
-imagekit.upload({
-    file: file.files[0],
-    fileName: "abc1.jpg",
-    token: 'generated_token',
-    signature: 'generated_signature',
-    expire: 'generated_expire'
-}).then(result => {
-    console.log(result);
-}).catch(error => {
-    console.error(error);
-});
-```
+To enable type checking in JavaScript projects, add `//@ts-check` at the top of your JavaScript files. This will activate type checking in your IDE.
 
-## Test Examples
+## Documentation
 
-For a quick demonstration of the SDK features, check the test suite:
-- URL generation examples can be found in [basic.js](./test/url-generation/basic.js) and [overlay.js](./test/url-generation/overlay.js) files.
-- File upload examples can be found in [test/upload.js](./test/upload.js).
+Refer to the ImageKit [official documentation](https://imagekit.io/docs/integration/javascript) for more details on how to use the SDK.
 
 ## Changelog
 
-For a detailed history of changes, please refer to [CHANGELOG.md](CHANGELOG.md).
\ No newline at end of file
+For a detailed history of changes, refer to [CHANGELOG.md](CHANGELOG.md).

diff --git a/package.json b/package.json
index 2d9a978..b64f91a 100644
--- a/package.json
+++ b/package.json
@@ -1,19 +1,21 @@
 {
-    "name": "imagekit-javascript",
-    "version": "4.0.1",
-    "description": "Javascript SDK for using ImageKit.io in the browser",
+    "name": "@imagekit/javascript",
+    "version": "5.0.0",
+    "description": "ImageKit Javascript SDK",
     "main": "dist/imagekit.cjs.js",
     "module": "dist/imagekit.esm.js",
     "browser": "dist/imagekit.min.js",
     "unpkg": "dist/imagekit.min.js",
-    "types": "dist/src/index.d.ts",
+    "types": "dist/index.d.ts",
     "files": [
-        "dist",
-        "src"
+        "dist"
     ],
     "devDependencies": {
         "@babel/cli": "^7.10.5",
         "@babel/core": "^7.10.5",
+        "@babel/plugin-proposal-class-properties": "^7.18.6",
+        "@babel/plugin-proposal-optional-chaining": "^7.21.0",
+        "@babel/plugin-transform-optional-chaining": "^7.25.9",
         "@babel/preset-env": "^7.10.4",
         "@babel/preset-typescript": "^7.13.0",
         "@babel/register": "^7.14.5",
@@ -24,8 +26,7 @@
         "@types/node": "^15.6.1",
         "babel-plugin-transform-class-properties": "^6.24.1",
         "chai": "^4.2.0",
-        "codecov": "^3.8.0",
-        "esm": "^3.2.25",
+        "codecov": "^3.8.3",
         "formdata-node": "2.1.0",
         "mocha": "^7.0.1",
         "nyc": "^15.1.0",
@@ -43,9 +44,12 @@
         "dev": "rollup -c -w",
         "export-types": "tsc",
         "build": "rm -rf dist*;rollup -c && yarn export-types",
-        "test": "NODE_ENV=test nyc ./node_modules/mocha/bin/mocha \"test/**/*.js\"",
-        "startSampleApp": "yarn build && cd samples/sample-app/ && yarn install && node index.js",
-        "report-coverage": "codecov"
+        "test": "NODE_ENV=test nyc ./node_modules/mocha/bin/mocha --require ./test/setup.js \"test/**/*.js\"",
+        "startSampleApp": "yarn build && cd samples/sample-app/ && yarn install && node index.js"
+    },
+    "publishConfig": {
+        "tag": "beta",
+        "access": "public"
     },
     "repository": {
         "type": "git",
@@ -54,14 +58,12 @@
     "keywords": [
         "imagekit",
         "javascript",
-        "sdk",
-        "js",
         "image",
+        "video",
+        "upload",
         "optimization",
         "transformation",
         "resize",
-        "upload",
-        "video",
         "overlay"
     ],
     "author": "ImageKit Developer",
@@ -69,6 +71,5 @@
     "bugs": {
         "url": "https://github.com/imagekit-developer/imagekit-javascript/issues"
     },
-    "homepage": "https://github.com/imagekit-developer/imagekit-javascript#readme",
-    "dependencies": {}
+    "homepage": "https://github.com/imagekit-developer/imagekit-javascript#readme"
 }
diff --git a/rollup.config.js b/rollup.config.js
index 747e961..95ae3de 100644
--- a/rollup.config.js
+++ b/rollup.config.js
@@ -12,8 +12,7 @@ export default [
     output: {
       name: "ImageKit",
       file: pkg.browser,
-      format: "umd",
-      sourceMap: true,
+      format: "umd"
     },
     plugins: [
       nodeResolve({ extensions: [".ts"] }),
@@ -34,8 +33,8 @@ export default [
   {
     input: "src/index.ts",
     output: [
-      { file: pkg.main, format: "cjs", exports: "default" },
-      { file: pkg.module, format: "es", exports: "default" },
+      { file: pkg.main, format: "cjs", exports: "named" },
+      { file: pkg.module, format: "es", exports: "named" },
     ],
     plugins: [
       nodeResolve({ extensions: [".ts"] }),
diff --git a/samples/sample-app/views/index.pug b/samples/sample-app/views/index.pug
index 91d398f..4c53a49 100644
--- a/samples/sample-app/views/index.pug
+++ b/samples/sample-app/views/index.pug
@@ -23,6 +23,7 @@ html
         script(type='text/javascript' src="./imagekit.min.js")
         script.
             try {
+                window.controller = new AbortController();
                 var imagekit = new ImageKit({
                     publicKey: "!{publicKey}",
                     urlEndpoint: "!{urlEndpoint}",
@@ -51,9 +52,11 @@ html
                     var statusEl = document.getElementById("status");
                     statusEl.innerHTML = "Uploading...";
 
+                    
                     // Use this if you want to track upload progress
                     var customXHR = new XMLHttpRequest();
                     customXHR.upload.addEventListener('progress', function (e) {
+                        console.log("On progress event handler from customXHR");
                         if (e.loaded <= fileSize) {
                             var percent = Math.round(e.loaded / fileSize * 100);
                             console.log(`Uploaded ${percent}%`);
@@ -94,6 +97,11 @@ html
                                 token: securityParametersObj.token,
                                 signature: securityParametersObj.signature,
                                 expire: securityParametersObj.expire,
+                                signal: window.controller.signal,
+                                onProgress: function(e) {
+                                    console.log("On progress event handler from SDK");
+                                    console.log(e.loaded);
+                                },
                                 //- extensions: [
                                 //-     {
                                 //-         name: "aws-auto-tagging",
@@ -102,6 +110,7 @@ html
                                 //-     }
                                 //- ],
                             }, function(err, result) {
+                                debugger;
                                 if (err) {
                                     statusEl.innerHTML = "Error uploading image. "+ err.message; 
                                     console.log(err) 
diff --git a/src/constants/errorMessages.ts b/src/constants/errorMessages.ts
index 06d8b51..4b394f9 100644
--- a/src/constants/errorMessages.ts
+++ b/src/constants/errorMessages.ts
@@ -1,24 +1,14 @@
 export default {
-  MANDATORY_INITIALIZATION_MISSING: { message: "Missing urlEndpoint during SDK initialization", help: "" },
-  INVALID_TRANSFORMATION_POSITION: { message: "Invalid transformationPosition parameter", help: "" },
-  PRIVATE_KEY_CLIENT_SIDE: { message: "privateKey should not be passed on the client side", help: "" },
-  MISSING_UPLOAD_DATA: { message: "Missing data for upload", help: "" },
-  MISSING_UPLOAD_FILE_PARAMETER: { message: "Missing file parameter for upload", help: "" },
-  MISSING_UPLOAD_FILENAME_PARAMETER: { message: "Missing fileName parameter for upload", help: "" },
-  MISSING_AUTHENTICATION_ENDPOINT: { message: "Missing authentication endpoint for upload", help: "" },
-  MISSING_PUBLIC_KEY: { message: "Missing public key for upload", help: "" },
-  AUTH_ENDPOINT_TIMEOUT: { message: "The authenticationEndpoint you provided timed out in 60 seconds", help: "" },
-  AUTH_ENDPOINT_NETWORK_ERROR: { message: "Request to authenticationEndpoint failed due to network error", help: "" },
-  AUTH_INVALID_RESPONSE: { message: "Invalid response from authenticationEndpoint. The SDK expects a JSON response with three fields i.e. signature, token and expire.", help: "" },
+  MISSING_UPLOAD_FILE_PARAMETER: { message: "Missing file parameter for upload" },
+  MISSING_UPLOAD_FILENAME_PARAMETER: { message: "Missing fileName parameter for upload" },
+  MISSING_PUBLIC_KEY: { message: "Missing public key for upload" },
   UPLOAD_ENDPOINT_NETWORK_ERROR: {
-    message: "Request to ImageKit upload endpoint failed due to network error",
-    help: "",
+    message: "Request to ImageKit upload endpoint failed due to network error"
   },
-  INVALID_UPLOAD_OPTIONS: { message: "Invalid uploadOptions parameter", help: "" },
-  MISSING_SIGNATURE: { message: "Missing signature for upload. The SDK expects token, signature and expire for authentication.", help: ""},
-  MISSING_TOKEN: { message: "Missing token for upload. The SDK expects token, signature and expire for authentication.", help: ""},
-  MISSING_EXPIRE: { message: "Missing expire for upload. The SDK expects token, signature and expire for authentication.", help: ""},
-  INVALID_TRANSFORMATION: { message: "Invalid transformation parameter. Please include at least pre, post, or both.", help: ""},
-  INVALID_PRE_TRANSFORMATION: { message: "Invalid pre transformation parameter.", help: ""},
-  INVALID_POST_TRANSFORMATION: { message: "Invalid post transformation parameter.", help: ""},
+  MISSING_SIGNATURE: { message: "Missing signature for upload. The SDK expects token, signature and expire for authentication." },
+  MISSING_TOKEN: { message: "Missing token for upload. The SDK expects token, signature and expire for authentication." },
+  MISSING_EXPIRE: { message: "Missing expire for upload. The SDK expects token, signature and expire for authentication." },
+  INVALID_TRANSFORMATION: { message: "Invalid transformation parameter. Please include at least pre, post, or both." },
+  INVALID_PRE_TRANSFORMATION: { message: "Invalid pre transformation parameter." },
+  INVALID_POST_TRANSFORMATION: { message: "Invalid post transformation parameter." }
 };
diff --git a/src/index.ts b/src/index.ts
index 6594fa7..4b047e1 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -1,91 +1,13 @@
-import { version } from "../package.json";
-import errorMessages from "./constants/errorMessages";
-import { ImageKitOptions, UploadOptions, UploadResponse, UrlOptions } from "./interfaces";
-import IKResponse from "./interfaces/IKResponse";
-import { upload } from "./upload/index";
-import respond from "./utils/respond";
-import { url } from "./url/index";
-import transformationUtils from "./utils/transformation";
-
-function mandatoryParametersAvailable(options: ImageKitOptions) {
-  return options.urlEndpoint;
-}
-
-const promisify = function <T = void>(thisContext: ImageKit, fn: Function) {
-  return function (...args: any[]): Promise<T> | void {
-    if (args.length === fn.length && typeof args[args.length - 1] !== "undefined") {
-      if (typeof args[args.length - 1] !== "function") {
-        throw new Error("Callback must be a function.");
-      }
-      fn.call(thisContext, ...args);
-    } else {
-      return new Promise<T>((resolve, reject) => {
-        const callback = function (err: Error, ...results: any[]) {
-          if (err) {
-            return reject(err);
-          } else {
-            resolve(results.length > 1 ? results : results[0]);
-          }
-        };
-        args.pop()
-        args.push(callback);
-        fn.call(thisContext, ...args);
-      });
-    }
-  };
+import type { SrcOptions, Transformation, UploadOptions, UploadResponse } from "./interfaces";
+import { ImageKitAbortError, ImageKitInvalidRequestError, ImageKitServerError, ImageKitUploadNetworkError, upload } from "./upload";
+import { buildSrc, buildTransformationString } from "./url";
+
+export { buildSrc, buildTransformationString, upload, ImageKitInvalidRequestError, ImageKitAbortError, ImageKitServerError, ImageKitUploadNetworkError };
+export type {
+  Transformation,
+  SrcOptions,
+  UploadOptions,
+  UploadResponse
 };
 
-class ImageKit {
-  options: ImageKitOptions = {
-    publicKey: "",
-    urlEndpoint: "",
-    transformationPosition: transformationUtils.getDefault(),
-  };
-
-  constructor(opts: ImageKitOptions) {
-    this.options = { ...this.options, ...(opts || {}) };
-    if (!mandatoryParametersAvailable(this.options)) {
-      throw errorMessages.MANDATORY_INITIALIZATION_MISSING;
-    }
-
-    if (!transformationUtils.validParameters(this.options)) {
-      throw errorMessages.INVALID_TRANSFORMATION_POSITION;
-    }
-  }
-
-  /**
-   * A utility function to generate asset URL. It applies the specified transformations and other parameters to the URL.
-   */
-  url(urlOptions: UrlOptions): string {
-    return url(urlOptions, this.options);
-  }
-
-  /**
-   * For uploading files directly from the browser to ImageKit.io.
-   *
-   * {@link https://imagekit.io/docs/api-reference/upload-file/upload-file#how-to-implement-client-side-file-upload}
-   */
-  upload(uploadOptions: UploadOptions, options?: Partial<ImageKitOptions>): Promise<IKResponse<UploadResponse>>
-  upload(uploadOptions: UploadOptions, callback: (err: Error | null, response: IKResponse<UploadResponse> | null) => void, options?: Partial<ImageKitOptions>): void;
-  upload(uploadOptions: UploadOptions, callbackOrOptions?: ((err: Error | null, response: IKResponse<UploadResponse> | null) => void) | Partial<ImageKitOptions>, options?: Partial<ImageKitOptions>): void | Promise<IKResponse<UploadResponse>> {
-    let callback;
-    if (typeof callbackOrOptions === 'function') {
-      callback = callbackOrOptions;
-    } else {
-      options = callbackOrOptions || {};
-    }
-    if (!uploadOptions || typeof uploadOptions !== "object") {
-      return respond(true, errorMessages.INVALID_UPLOAD_OPTIONS, callback);
-    }
-    var mergedOptions = {
-      ...this.options,
-      ...options,
-    };
-    const { xhr: userProvidedXHR } = uploadOptions || {};
-    delete uploadOptions.xhr;
-    const xhr = userProvidedXHR || new XMLHttpRequest();
-    return promisify<IKResponse<UploadResponse>>(this, upload)(xhr, uploadOptions, mergedOptions, callback);
-  }
-}
 
-export default ImageKit;
diff --git a/src/interfaces/IKResponse.ts b/src/interfaces/IKResponse.ts
deleted file mode 100644
index a53ca4f..0000000
--- a/src/interfaces/IKResponse.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-interface ResponseMetadata {
-  statusCode: number;
-  headers: Record<string, string | number | boolean>;
-}
-
-type IKResponse<T> = T extends Error
-  ? T & { $ResponseMetadata?: ResponseMetadata }
-  : T & { $ResponseMetadata: ResponseMetadata };
-
-export default IKResponse;
diff --git a/src/interfaces/ImageKitOptions.ts b/src/interfaces/ImageKitOptions.ts
deleted file mode 100644
index 6f8b78f..0000000
--- a/src/interfaces/ImageKitOptions.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import { TransformationPosition } from ".";
-
-export interface ImageKitOptions {
-  urlEndpoint: string;
-  publicKey?: string;
-  transformationPosition?: TransformationPosition;
-}
diff --git a/src/interfaces/SrcOptions.ts b/src/interfaces/SrcOptions.ts
new file mode 100644
index 0000000..4b0187e
--- /dev/null
+++ b/src/interfaces/SrcOptions.ts
@@ -0,0 +1,35 @@
+import { Transformation } from "./Transformation";
+import { TransformationPosition } from ".";
+
+export interface SrcOptions {
+  /**
+   * Accepts a relative or absolute path of the resource. If a relative path is provided, it is appended to the `urlEndpoint`. 
+   * If an absolute path is provided, `urlEndpoint` is ignored.
+   */
+  src: string;
+
+  /**
+   * Get your urlEndpoint from the [ImageKit dashboard](https://imagekit.io/dashboard/url-endpoints).
+   */
+  urlEndpoint: string;
+
+  /**
+   * An array of objects specifying the transformations to be applied in the URL. If more than one transformation is specified, they are applied in the order they are specified as chained transformations.
+   * 
+   * {@link https://imagekit.io/docs/transformations#chained-transformations}
+   */
+  transformation?: Array<Transformation>;
+
+  /**
+   * These are additional query parameters that you want to add to the final URL.
+   * They can be any query parameters and not necessarily related to ImageKit.
+   * This is especially useful if you want to add a versioning parameter to your URLs.
+   */
+  queryParameters?: { [key: string]: string | number };
+
+  /**
+   * By default, the transformation string is added as a query parameter in the URL, e.g., `?tr=w-100,h-100`. 
+   * If you want to add the transformation string in the path of the URL, set this to `path`.
+   */
+  transformationPosition?: TransformationPosition;
+}
diff --git a/src/interfaces/Transformation.ts b/src/interfaces/Transformation.ts
index adbe8dd..b45be9f 100644
--- a/src/interfaces/Transformation.ts
+++ b/src/interfaces/Transformation.ts
@@ -4,394 +4,395 @@ export type StreamingResolution = "240" | "360" | "480" | "720" | "1080" | "1440
 
 /**
  * The SDK provides easy-to-use names for transformations. These names are converted to the corresponding transformation string before being added to the URL.
- * SDKs are updated regularly to support new transformations. If you want to use a transformation that is not supported by the SDK, you can use the `raw` parameter to pass the transformation string directly.
+ * SDKs are updated regularly to support new transformations. If you want to use a transformation that is not supported by the SDK, 
+ * You can use the `raw` parameter to pass the transformation string directly.
  * 
- * {@link https://imagekit.io/docs/transformations|Transformations Documentation}
+ * [Transformations Documentation](https://imagekit.io/docs/transformations)
  */
 export interface Transformation {
     /**
-     * Specifies the width of the output. If a value between 0 and 1 is provided, it is treated as a percentage
-     * (e.g., `0.4` represents 40% of the original width). You can also supply arithmetic expressions (e.g., `iw_div_2`).
+     * Specifies the width of the output. If a value between 0 and 1 is provided, it is treated as a percentage (e.g., `0.4` represents 40% of the original width). 
+     * You can also supply arithmetic expressions (e.g., `iw_div_2`).
      * 
-     * Width transformation - {@link https://imagekit.io/docs/image-resize-and-crop#width---w|Images} | {@link https://imagekit.io/docs/video-resize-and-crop#width---w|Videos}
+     * Width transformation - [Images](https://imagekit.io/docs/image-resize-and-crop#width---w) | [Videos](https://imagekit.io/docs/video-resize-and-crop#width---w)
      */
     width?: number | string;
 
     /**
-     * Specifies the height of the output. If a value between 0 and 1 is provided, it is treated as a percentage
-     * (e.g., `0.5` represents 50% of the original height). You can also supply arithmetic expressions (e.g., `ih_mul_0.5`).
+     * Specifies the height of the output. If a value between 0 and 1 is provided, it is treated as a percentage (e.g., `0.5` represents 50% of the original height). 
+     * You can also supply arithmetic expressions (e.g., `ih_mul_0.5`).
      * 
-     * Height transformation - {@link https://imagekit.io/docs/image-resize-and-crop#height---h|Images} | {@link https://imagekit.io/docs/video-resize-and-crop#height---h|Videos}
+     * Height transformation - [Images](https://imagekit.io/docs/image-resize-and-crop#height---h) | [Videos](https://imagekit.io/docs/video-resize-and-crop#height---h)
      */
     height?: number | string;
 
     /**
-     * Specifies the aspect ratio for the output, e.g., "ar-4-3". Typically used with either width or height (but not both).
+     * Specifies the aspect ratio for the output, e.g., "ar-4-3". Typically used with either width or height (but not both). 
      * For example: aspectRatio = `4:3`, `4_3`, or an expression like `iar_div_2`.
      * 
-     * {@link https://imagekit.io/docs/image-resize-and-crop#aspect-ratio---ar|Image Resize and Crop - Aspect Ratio}
+     * [Image Resize and Crop - Aspect Ratio](https://imagekit.io/docs/image-resize-and-crop#aspect-ratio---ar)
      */
     aspectRatio?: number | string;
 
     /**
-     * Specifies the background to be used in conjunction with certain cropping strategies when resizing an image.
+     * Specifies the background to be used in conjunction with certain cropping strategies when resizing an image. 
      * - A solid color: e.g., `red`, `F3F3F3`, `AAFF0010`.
      * 
-     *   {@link https://imagekit.io/docs/effects-and-enhancements#solid-color-background|Effects and Enhancements - Solid Color Background}
+     *   [Effects and Enhancements - Solid Color Background](https://imagekit.io/docs/effects-and-enhancements#solid-color-background)
      * 
      * - A blurred background: e.g., `blurred`, `blurred_25_N15`, etc.
      * 
-     *   {@link https://imagekit.io/docs/effects-and-enhancements#blurred-background|Effects and Enhancements - Blurred Background}
+     *   [Effects and Enhancements - Blurred Background](https://imagekit.io/docs/effects-and-enhancements#blurred-background)
      * 
      * - Expand the image boundaries using generative fill: `genfill`. Not supported inside overlay. Optionally, control the background scene by passing a text prompt:
      *   `genfill[:-prompt-${text}]` or `genfill[:-prompte-${urlencoded_base64_encoded_text}]`.
      *   
-     *   {@link https://imagekit.io/docs/ai-transformations#generative-fill-bg-genfill|AI Transformations - Generative Fill Background}
+     *   [AI Transformations - Generative Fill Background](https://imagekit.io/docs/ai-transformations#generative-fill-bg-genfill)
      */
     background?: string;
 
     /**
-     * Adds a border to the output media. Accepts a string in the format `<border-width>_<hex-code>`
+     * Adds a border to the output media. Accepts a string in the format `<border-width>_<hex-code>` 
      * (e.g., `5_FFF000` for a 5px yellow border), or an expression like `ih_div_20_FF00FF`.
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#border---b|Effects and Enhancements - Border}
+     * [Effects and Enhancements - Border](https://imagekit.io/docs/effects-and-enhancements#border---b)
      */
     border?: string;
 
     /**
-     * {@link https://imagekit.io/docs/image-resize-and-crop#crop-crop-modes--focus|Image Resize and Crop - Crop Modes}
+     * [Image Resize and Crop - Crop Modes](https://imagekit.io/docs/image-resize-and-crop#crop-crop-modes--focus)
      */
     crop?: "force" | "at_max" | "at_max_enlarge" | "at_least" | "maintain_ratio";
 
     /**
-     * {@link https://imagekit.io/docs/image-resize-and-crop#crop-crop-modes--focus|Image Resize and Crop - Crop Modes}
+     * [Image Resize and Crop - Crop Modes](https://imagekit.io/docs/image-resize-and-crop#crop-crop-modes--focus)
      */
     cropMode?: "pad_resize" | "extract" | "pad_extract";
 
     /**
      * Accepts values between 0.1 and 5, or `auto` for automatic device pixel ratio (DPR) calculation.
      * 
-     * {@link https://imagekit.io/docs/image-resize-and-crop#dpr---dpr|Image Resize and Crop - DPR}
+     * [Image Resize and Crop - DPR](https://imagekit.io/docs/image-resize-and-crop#dpr---dpr)
      */
     dpr?: number
 
     /**
-     * This parameter can be used with pad resize, maintain ratio, or extract crop to modify the padding or cropping behavior.
+     * This parameter can be used with pad resize, maintain ratio, or extract crop to modify the padding or cropping behavior. 
      * 
-     * {@link https://imagekit.io/docs/image-resize-and-crop#focus---fo|Image Resize and Crop - Focus}
+     * [Image Resize and Crop - Focus](https://imagekit.io/docs/image-resize-and-crop#focus---fo)
      */
     focus?: string;
 
     /**
-     * Specifies the quality of the output image for lossy formats such as JPEG, WebP, and AVIF.
+     * Specifies the quality of the output image for lossy formats such as JPEG, WebP, and AVIF. 
      * A higher quality value results in a larger file size with better quality, while a lower value produces a smaller file size with reduced quality.
      * 
-     * {@link https://imagekit.io/docs/image-optimization#quality---q|Image Optimization - Quality}
+     * [Image Optimization - Quality](https://imagekit.io/docs/image-optimization#quality---q)
      */
     quality?: number;
 
     /**
-     * {@link https://imagekit.io/docs/image-resize-and-crop#example---focus-using-cropped-image-coordinates|Image Resize and Crop - Focus Using Cropped Image Coordinates}
+     * [Image Resize and Crop - Focus Using Cropped Image Coordinates](https://imagekit.io/docs/image-resize-and-crop#example---focus-using-cropped-image-coordinates)
      */
     x?: number | string;
 
     /**
-     * {@link https://imagekit.io/docs/image-resize-and-crop#example---focus-using-cropped-image-coordinates|Image Resize and Crop - Focus Using Cropped Image Coordinates}
+     * [Image Resize and Crop - Focus Using Cropped Image Coordinates](https://imagekit.io/docs/image-resize-and-crop#example---focus-using-cropped-image-coordinates)
      */
     xCenter?: number | string;
 
     /**
-     * {@link https://imagekit.io/docs/image-resize-and-crop#example---focus-using-cropped-image-coordinates|Image Resize and Crop - Focus Using Cropped Image Coordinates}
+     * [Image Resize and Crop - Focus Using Cropped Image Coordinates](https://imagekit.io/docs/image-resize-and-crop#example---focus-using-cropped-image-coordinates)
      */
     y?: number | string;
 
     /**
-     * {@link https://imagekit.io/docs/image-resize-and-crop#example---focus-using-cropped-image-coordinates|Image Resize and Crop - Focus Using Cropped Image Coordinates}
+     * [Image Resize and Crop - Focus Using Cropped Image Coordinates](https://imagekit.io/docs/image-resize-and-crop#example---focus-using-cropped-image-coordinates)
      */
     yCenter?: number | string;
 
     /**
-     * Specifies the output format for images or videos, e.g., `jpg`, `png`, `webp`, `mp4`, or `auto`.
+     * Specifies the output format for images or videos, e.g., `jpg`, `png`, `webp`, `mp4`, or `auto`. 
      * You can also pass `orig` for images to return the original format.
      * ImageKit automatically delivers images and videos in the optimal format based on device support unless overridden by the dashboard settings or the format parameter.
      * 
-     * {@link https://imagekit.io/docs/image-optimization#format---f|Image Optimization - Format} & {@link https://imagekit.io/docs/video-optimization#format---f|Video Optimization - Format}
+     * [Image Optimization - Format](https://imagekit.io/docs/image-optimization#format---f) & [Video Optimization - Format](https://imagekit.io/docs/video-optimization#format---f)
      */
     format?: "auto" | "webp" | "jpg" | "jpeg" | "png" | "gif" | "svg" | "mp4" | "webm" | "avif" | "orig";
 
     /**
-     * Specifies the video codec, e.g., `h264`, `vp9`, `av1`, or `none`.
+     * Specifies the video codec, e.g., `h264`, `vp9`, `av1`, or `none`. 
      * 
-     * {@link https://imagekit.io/docs/video-optimization#video-codec---vc|Video Optimization - Video Codec}
+     * [Video Optimization - Video Codec](https://imagekit.io/docs/video-optimization#video-codec---vc)
      */
     videoCodec?: "h264" | "vp9" | "av1" | "none";
 
     /**
-     * Specifies the audio codec, e.g., `aac`, `opus`, or `none`.
+     * Specifies the audio codec, e.g., `aac`, `opus`, or `none`. 
      * 
-     * {@link https://imagekit.io/docs/video-optimization#audio-codec---ac|Video Optimization - Audio Codec}
+     * [Video Optimization - Audio Codec](https://imagekit.io/docs/video-optimization#audio-codec---ac)
      */
     audioCodec?: "aac" | "opus" | "none";
 
     /**
-     * Specifies the corner radius for rounded corners (e.g., 20) or `max` for circular/oval shapes.
+     * Specifies the corner radius for rounded corners (e.g., 20) or `max` for circular/oval shapes. 
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#radius---r|Effects and Enhancements - Radius}
+     * [Effects and Enhancements - Radius](https://imagekit.io/docs/effects-and-enhancements#radius---r)
      */
     radius?: number | "max";
 
     /**
-     * Specifies the rotation angle in degrees. Positive values rotate the image clockwise; you can also use, for example, `N40` for counterclockwise rotation
+     * Specifies the rotation angle in degrees. Positive values rotate the image clockwise; you can also use, for example, `N40` for counterclockwise rotation 
      * or `auto` to use the orientation specified in the image's EXIF data.
      * For videos, only the following values are supported: 0, 90, 180, 270, or 360.
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#rotate---rt|Effects and Enhancements - Rotate}
+     * [Effects and Enhancements - Rotate](https://imagekit.io/docs/effects-and-enhancements#rotate---rt)
      */
     rotation?: number | string;
 
     /**
-     * Specifies the Gaussian blur level. Accepts an integer value between 1 and 100, or an expression like `bl-10`.
+     * Specifies the Gaussian blur level. Accepts an integer value between 1 and 100, or an expression like `bl-10`. 
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#blur---bl|Effects and Enhancements - Blur}
+     * [Effects and Enhancements - Blur](https://imagekit.io/docs/effects-and-enhancements#blur---bl)
      */
     blur?: number;
 
     /**
-     * {@link https://imagekit.io/docs/transformations#named-transformations|Transformations - Named Transformations}
+     * [Transformations - Named Transformations](https://imagekit.io/docs/transformations#named-transformations)
      */
     named?: string;
 
     /**
-     * Specifies a fallback image if the resource is not found, e.g., a URL or file path.
+     * Specifies a fallback image if the resource is not found, e.g., a URL or file path. 
      * 
-     * {@link https://imagekit.io/docs/image-transformation#default-image---di|Image Transformation - Default Image}
+     * [Image Transformation - Default Image](https://imagekit.io/docs/image-transformation#default-image---di)
      */
     defaultImage?: string;
 
     /**
-     * Flips or mirrors an image either horizontally, vertically, or both.
+     * Flips or mirrors an image either horizontally, vertically, or both. 
      * Acceptable values: `h` (horizontal), `v` (vertical), `h_v` (horizontal and vertical), or `v_h`.
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#flip---fl|Effects and Enhancements - Flip}
+     * [Effects and Enhancements - Flip](https://imagekit.io/docs/effects-and-enhancements#flip---fl)
      */
     flip?: "h" | "v" | "h_v" | "v_h";
 
     /**
-     * If set to true, serves the original file without applying any transformations.
+     * If set to true, serves the original file without applying any transformations. 
      * 
-     * {@link https://imagekit.io/docs/core-delivery-features#deliver-original-file-as-is---orig-true|Core Delivery Features - Deliver Original File As Is}
+     * [Core Delivery Features - Deliver Original File As Is](https://imagekit.io/docs/core-delivery-features#deliver-original-file-as-is---orig-true)
      */
     original?: boolean;
 
     /**
-     * Specifies the start offset (in seconds) for trimming videos, e.g., `5` or `10.5`.
+     * Specifies the start offset (in seconds) for trimming videos, e.g., `5` or `10.5`. 
      * Arithmetic expressions are also supported.
      * 
-     * {@link https://imagekit.io/docs/trim-videos#start-offset---so|Trim Videos - Start Offset}
+     * [Trim Videos - Start Offset](https://imagekit.io/docs/trim-videos#start-offset---so)
      */
     startOffset?: number | string;
 
     /**
-     * Specifies the end offset (in seconds) for trimming videos, e.g., `5` or `10.5`.
+     * Specifies the end offset (in seconds) for trimming videos, e.g., `5` or `10.5`. 
      * Typically used with startOffset to define a time window. Arithmetic expressions are supported.
      * 
-     * {@link https://imagekit.io/docs/trim-videos#end-offset---eo|Trim Videos - End Offset}
+     * [Trim Videos - End Offset](https://imagekit.io/docs/trim-videos#end-offset---eo)
      */
     endOffset?: number | string;
 
     /**
-     * Specifies the duration (in seconds) for trimming videos, e.g., `5` or `10.5`.
+     * Specifies the duration (in seconds) for trimming videos, e.g., `5` or `10.5`. 
      * Typically used with startOffset to indicate the length from the start offset. Arithmetic expressions are supported.
      * 
-     * {@link https://imagekit.io/docs/trim-videos#duration---du|Trim Videos - Duration}
+     * [Trim Videos - Duration](https://imagekit.io/docs/trim-videos#duration---du)
      */
     duration?: number | string;
 
     /**
-     * An array of resolutions for adaptive bitrate streaming, e.g., [`240`, `360`, `480`, `720`, `1080`].
+     * An array of resolutions for adaptive bitrate streaming, e.g., [`240`, `360`, `480`, `720`, `1080`]. 
      * 
-     * {@link https://imagekit.io/docs/adaptive-bitrate-streaming|Adaptive Bitrate Streaming}
+     * [Adaptive Bitrate Streaming](https://imagekit.io/docs/adaptive-bitrate-streaming)
      */
     streamingResolutions?: StreamingResolution[];
 
     /**
-     * Enables a grayscale effect for images.
+     * Enables a grayscale effect for images. 
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#grayscale---e-grayscale|Effects and Enhancements - Grayscale}
+     * [Effects and Enhancements - Grayscale](https://imagekit.io/docs/effects-and-enhancements#grayscale---e-grayscale)
      */
     grayscale?: true;
 
     /**
-     * Upscales images beyond their original dimensions using AI. Not supported inside overlay.
+     * Upscales images beyond their original dimensions using AI. Not supported inside overlay. 
      * 
-     * {@link https://imagekit.io/docs/ai-transformations#upscale-e-upscale|AI Transformations - Upscale}
+     * [AI Transformations - Upscale](https://imagekit.io/docs/ai-transformations#upscale-e-upscale)
      */
     aiUpscale?: true
 
     /**
-     * Performs AI-based retouching to improve faces or product shots. Not supported inside overlay.
+     * Performs AI-based retouching to improve faces or product shots. Not supported inside overlay. 
      * 
-     * {@link https://imagekit.io/docs/ai-transformations#retouch-e-retouch|AI Transformations - Retouch}
+     * [AI Transformations - Retouch](https://imagekit.io/docs/ai-transformations#retouch-e-retouch)
      */
     aiRetouch?: true
 
     /**
-     * Generates a variation of an image using AI. This produces a new image with slight variations from the original,
+     * Generates a variation of an image using AI. This produces a new image with slight variations from the original, 
      * such as changes in color, texture, and other visual elements, while preserving the structure and essence of the original image. Not supported inside overlay.
      * 
-     * {@link https://imagekit.io/docs/ai-transformations#generate-variations-of-an-image-e-genvar|AI Transformations - Generate Variations}
+     * [AI Transformations - Generate Variations](https://imagekit.io/docs/ai-transformations#generate-variations-of-an-image-e-genvar)
      */
     aiVariation?: true
 
     /**
-     * Adds an AI-based drop shadow around a foreground object on a transparent or removed background.
+     * Adds an AI-based drop shadow around a foreground object on a transparent or removed background. 
      * Optionally, control the direction, elevation, and saturation of the light source (e.g., `az-45` to change light direction).
      * Pass `true` for the default drop shadow, or provide a string for a custom drop shadow.
      * Supported inside overlay.
      * 
-     * {@link https://imagekit.io/docs/ai-transformations#ai-drop-shadow-e-dropshadow|AI Transformations - Drop Shadow}
+     * [AI Transformations - Drop Shadow](https://imagekit.io/docs/ai-transformations#ai-drop-shadow-e-dropshadow)
      */
     aiDropShadow?: true | string
 
     /**
-     * Uses AI to change the background. Provide a text prompt or a base64-encoded prompt,
+     * Uses AI to change the background. Provide a text prompt or a base64-encoded prompt, 
      * e.g., `prompt-snow road` or `prompte-[urlencoded_base64_encoded_text]`.
      * Not supported inside overlay.
      * 
-     * {@link https://imagekit.io/docs/ai-transformations#change-background-e-changebg|AI Transformations - Change Background}
+     * [AI Transformations - Change Background](https://imagekit.io/docs/ai-transformations#change-background-e-changebg)
      */
     aiChangeBackground?: string;
 
     /**
-     * Applies ImageKit’s in-house background removal.
+     * Applies ImageKit’s in-house background removal. 
      * Supported inside overlay.
      * 
-     * {@link https://imagekit.io/docs/ai-transformations#imagekit-background-removal-e-bgremove|AI Transformations - Background Removal}
+     * [AI Transformations - Background Removal](https://imagekit.io/docs/ai-transformations#imagekit-background-removal-e-bgremove)
      */
     aiRemoveBackground?: true
 
     /**
-     * Uses third-party background removal.
+     * Uses third-party background removal. 
      * Note: It is recommended to use aiRemoveBackground, ImageKit’s in-house solution, which is more cost-effective.
      * Supported inside overlay.
      * 
-     * {@link https://imagekit.io/docs/ai-transformations#background-removal-e-removedotbg|AI Transformations - External Background Removal}
+     * [AI Transformations - External Background Removal](https://imagekit.io/docs/ai-transformations#background-removal-e-removedotbg)
      */
     aiRemoveBackgroundExternal?: true
 
     /**
-     * Automatically enhances the contrast of an image (contrast stretch).
+     * Automatically enhances the contrast of an image (contrast stretch). 
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#contrast-stretch---e-contrast|Effects and Enhancements - Contrast Stretch}
+     * [Effects and Enhancements - Contrast Stretch](https://imagekit.io/docs/effects-and-enhancements#contrast-stretch---e-contrast)
      */
     contrastStretch?: true
 
     /**
-     * Adds a shadow beneath solid objects in an image with a transparent background.
+     * Adds a shadow beneath solid objects in an image with a transparent background. 
      * For AI-based drop shadows, refer to aiDropShadow.
      * Pass `true` for a default shadow, or provide a string for a custom shadow.
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#shadow---e-shadow|Effects and Enhancements - Shadow}
+     * [Effects and Enhancements - Shadow](https://imagekit.io/docs/effects-and-enhancements#shadow---e-shadow)
      */
     shadow?: true | string
 
     /**
-     * Sharpens the input image, highlighting edges and finer details.
+     * Sharpens the input image, highlighting edges and finer details. 
      * Pass `true` for default sharpening, or provide a numeric value for custom sharpening.
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#sharpen---e-sharpen|Effects and Enhancements - Sharpen}
+     * [Effects and Enhancements - Sharpen](https://imagekit.io/docs/effects-and-enhancements#sharpen---e-sharpen)
      */
     sharpen?: true | number
 
     /**
-     * Applies Unsharp Masking (USM), an image sharpening technique.
+     * Applies Unsharp Masking (USM), an image sharpening technique. 
      * Pass `true` for a default unsharp mask, or provide a string for a custom unsharp mask.
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#unsharp-mask---e-usm|Effects and Enhancements - Unsharp Mask}
+     * [Effects and Enhancements - Unsharp Mask](https://imagekit.io/docs/effects-and-enhancements#unsharp-mask---e-usm)
      */
     unsharpMask?: true | string;
 
     /**
-     * Creates a linear gradient with two colors. Pass `true` for a default gradient, or provide a string for a custom gradient.
+     * Creates a linear gradient with two colors. Pass `true` for a default gradient, or provide a string for a custom gradient. 
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#gradient---e-gradient|Effects and Enhancements - Gradient}
+     * [Effects and Enhancements - Gradient](https://imagekit.io/docs/effects-and-enhancements#gradient---e-gradient)
      */
     gradient?: true | string;
 
     /**
-     * Specifies whether the output JPEG image should be rendered progressively. Progressive loading begins with a low-quality,
+     * Specifies whether the output JPEG image should be rendered progressively. Progressive loading begins with a low-quality, 
      * pixelated version of the full image, which gradually improves to provide a faster perceived load time.
      * 
-     * {@link https://imagekit.io/docs/image-optimization#progressive-image---pr|Image Optimization - Progressive Image}
+     * [Image Optimization - Progressive Image](https://imagekit.io/docs/image-optimization#progressive-image---pr)
      */
     progressive?: boolean;
 
     /**
-     * Specifies whether the output image (in JPEG or PNG) should be compressed losslessly.
+     * Specifies whether the output image (in JPEG or PNG) should be compressed losslessly. 
      * 
-     * {@link https://imagekit.io/docs/image-optimization#lossless-webp-and-png---lo|Image Optimization - Lossless Compression}
+     * [Image Optimization - Lossless Compression](https://imagekit.io/docs/image-optimization#lossless-webp-and-png---lo)
      */
     lossless?: boolean
 
     /**
-     * Indicates whether the output image should retain the original color profile.
+     * Indicates whether the output image should retain the original color profile. 
      * 
-     * {@link https://imagekit.io/docs/image-optimization#color-profile---cp|Image Optimization - Color Profile}
+     * [Image Optimization - Color Profile](https://imagekit.io/docs/image-optimization#color-profile---cp)
      */
     colorProfile?: boolean;
 
     /**
-     * By default, ImageKit removes all metadata during automatic image compression.
+     * By default, ImageKit removes all metadata during automatic image compression. 
      * Set this to true to preserve metadata.
      * 
-     * {@link https://imagekit.io/docs/image-optimization#image-metadata---md|Image Optimization - Image Metadata}
+     * [Image Optimization - Image Metadata](https://imagekit.io/docs/image-optimization#image-metadata---md)
      */
     metadata?: boolean;
 
     /**
-     * Specifies the opacity level of the output image.
+     * Specifies the opacity level of the output image. 
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#opacity---o|Effects and Enhancements - Opacity}
+     * [Effects and Enhancements - Opacity](https://imagekit.io/docs/effects-and-enhancements#opacity---o)
      */
     opacity?: number;
 
     /**
-     * Useful for images with a solid or nearly solid background and a central object. This parameter trims the background,
+     * Useful for images with a solid or nearly solid background and a central object. This parameter trims the background, 
      * leaving only the central object in the output image.
      * 
-     * {@link https://imagekit.io/docs/effects-and-enhancements#trim-edges---t|Effects and Enhancements - Trim Edges}
+     * [Effects and Enhancements - Trim Edges](https://imagekit.io/docs/effects-and-enhancements#trim-edges---t)
      */
     trim?: true | number;
 
     /**
-     * Accepts a numeric value that determines how much to zoom in or out of the cropped area.
+     * Accepts a numeric value that determines how much to zoom in or out of the cropped area. 
      * It should be used in conjunction with fo-face or fo-<object_name>.
      * 
-     * {@link https://imagekit.io/docs/image-resize-and-crop#zoom---z|Image Resize and Crop - Zoom}
+     * [Image Resize and Crop - Zoom](https://imagekit.io/docs/image-resize-and-crop#zoom---z)
      */
     zoom?: number;
 
     /**
-     * Extracts a specific page or frame from multi-page or layered files (PDF, PSD, AI).
+     * Extracts a specific page or frame from multi-page or layered files (PDF, PSD, AI). 
      * For example, specify by number (e.g., `2`), a range (e.g., `3-4` for the 2nd and 3rd layers),
      * or by name (e.g., `name-layer-4` for a PSD layer).
      * 
-     * {@link https://imagekit.io/docs/vector-and-animated-images#get-thumbnail-from-psd-pdf-ai-eps-and-animated-files|Vector and Animated Images - Thumbnail Extraction}
+     * [Vector and Animated Images - Thumbnail Extraction](https://imagekit.io/docs/vector-and-animated-images#get-thumbnail-from-psd-pdf-ai-eps-and-animated-files)
      */
     page?: number | string;
 
     /**
-     * Pass any transformation not directly supported by the SDK.
+     * Pass any transformation not directly supported by the SDK. 
      * This transformation string is appended to the URL as provided.
      */
     raw?: string;
 
 
     /**
-     * Specifies an overlay to be applied on the parent image or video.
+     * Specifies an overlay to be applied on the parent image or video. 
      * ImageKit supports overlays including images, text, videos, subtitles, and solid colors.
      * 
-     * {@link https://imagekit.io/docs/transformations#overlay-using-layers|Transformations - Overlay Using Layers}
+     * [Transformations - Overlay Using Layers](https://imagekit.io/docs/transformations#overlay-using-layers)
      */
     overlay?: Overlay;
 }
@@ -408,7 +409,7 @@ export interface BaseOverlay {
      * Specifies the overlay's position relative to the parent asset.
      * Accepts a JSON object with `x` and `y` (or `focus`) properties.
      * 
-     * {@link https://imagekit.io/docs/transformations#position-of-layer|Transformations - Position of Layer}
+     * [Transformations - Position of Layer](https://imagekit.io/docs/transformations#position-of-layer)
      */
     position?: OverlayPosition;
 
@@ -416,7 +417,7 @@ export interface BaseOverlay {
      * Specifies timing information for the overlay (only applicable if the base asset is a video).
      * Accepts a JSON object with `start` (`lso`), `end` (`leo`), and `duration` (`ldu`) properties.
      * 
-     * {@link https://imagekit.io/docs/transformations#position-of-layer|Transformations - Position of Layer}
+     * [Transformations - Position of Layer](https://imagekit.io/docs/transformations#position-of-layer)
      */
     timing?: OverlayTiming;
 }
@@ -495,7 +496,7 @@ export interface TextOverlay extends BaseOverlay {
      * Regardless of the encoding method, the input text is always percent-encoded to ensure it is URL-safe.
      */
 
-    encoding: "auto" | "plain" | "base64";
+    encoding?: "auto" | "plain" | "base64";
 
     /**
      * Control styling of the text overlay.
@@ -521,12 +522,12 @@ export interface ImageOverlay extends BaseOverlay {
      * - Leading and trailing slashes are removed.
      * - Remaining slashes within the path are replaced with `@@` when using plain text.
      */
-    encoding: "auto" | "plain" | "base64";
+    encoding?: "auto" | "plain" | "base64";
 
     /**
      * Array of transformations to be applied to the overlay image. Supported transformations depends on the base/parent asset.
      * 
-     * {@link https://imagekit.io/docs/add-overlays-on-images#list-of-supported-image-transformations-in-image-layers|Image} | {@link https://imagekit.io/docs/add-overlays-on-videos#list-of-transformations-supported-on-image-overlay|Video}
+     * [Image](https://imagekit.io/docs/add-overlays-on-images#list-of-supported-image-transformations-in-image-layers) | [Video](https://imagekit.io/docs/add-overlays-on-videos#list-of-transformations-supported-on-image-overlay)
      */
     transformation?: Transformation[];
 }
@@ -548,12 +549,12 @@ export interface VideoOverlay extends BaseOverlay {
      * - Leading and trailing slashes are removed.
      * - Remaining slashes within the path are replaced with `@@` when using plain text.
      */
-    encoding: "auto" | "plain" | "base64";
+    encoding?: "auto" | "plain" | "base64";
 
     /**
      * Array of transformation to be applied to the overlay video. Except `streamingResolutions`, all other video transformations are supported.
      * 
-     * {@link https://imagekit.io/docs/video-transformation|Video Transformations}
+     * [Video Transformations](https://imagekit.io/docs/video-transformation)
      */
     transformation?: Transformation[];
 }
@@ -575,12 +576,12 @@ export interface SubtitleOverlay extends BaseOverlay {
      * - Leading and trailing slashes are removed.
      * - Remaining slashes within the path are replaced with `@@` when using plain text.
      */
-    encoding: "auto" | "plain" | "base64";
+    encoding?: "auto" | "plain" | "base64";
 
     /**
      * Control styling of the subtitle.
      * 
-     * {@link https://imagekit.io/docs/add-overlays-on-videos#styling-controls-for-subtitles-layer|Styling subtitles}
+     * [Styling subtitles](https://imagekit.io/docs/add-overlays-on-videos#styling-controls-for-subtitles-layer)
      */
     transformation?: SubtitleOverlayTransformation[];
 }
@@ -596,7 +597,7 @@ export interface SolidColorOverlay extends BaseOverlay {
     /**
      * Control width and height of the solid color overlay. Supported transformations depend on the base/parent asset.
      * 
-     * {@link https://imagekit.io/docs/add-overlays-on-images#apply-transformation-on-solid-color-overlay|Image} | {@link https://imagekit.io/docs/add-overlays-on-videos#apply-transformations-on-solid-color-block-overlay|Video}
+     * [Image](https://imagekit.io/docs/add-overlays-on-images#apply-transformation-on-solid-color-overlay) | [Video](https://imagekit.io/docs/add-overlays-on-videos#apply-transformations-on-solid-color-block-overlay)
      */
     transformation?: SolidColorOverlayTransformation[];
 }
diff --git a/src/interfaces/UploadOptions.ts b/src/interfaces/UploadOptions.ts
index 9a45479..1eaed4b 100644
--- a/src/interfaces/UploadOptions.ts
+++ b/src/interfaces/UploadOptions.ts
@@ -16,47 +16,74 @@ interface AbsObject {
 
 type PostTransformation = TransformationObject | GifToVideoOrThumbnailObject | AbsObject;
 
-interface Transformation{
-  pre?: string
-  post?: PostTransformation[]
+interface Transformation {
+  /**
+   * Specifies pre-transformations to be applied. Must be a valid string of transformations like "w-300,h-300".
+   * Refer to the docs for more details on transformations.
+   *
+   * {@link https://imagekit.io/docs/dam/pre-and-post-transformation-on-upload#pre-transformation}
+   */
+  pre?: string;
+
+  /**
+   * Specifies post-transformations to be applied. This is an array of transformation objects, each with:
+   *  - type: One of "transformation", "gif-to-video", "thumbnail", or "abs".
+   *  - value: A valid transformation string required if "type" is "transformation" or "abs". Optional if "type" is "gif-to-video" or "thumbnail".
+   *  - protocol: Used only when type is "abs". Can be "hls" or "dash".
+   *
+   * Refer to the docs for more details on transformations and usage in post.
+   *
+   * {@link https://imagekit.io/docs/dam/pre-and-post-transformation-on-upload#post-transformation}
+   */
+  post?: PostTransformation[];
 }
+
 /**
- * Options used when uploading a file
- *
- * {@link https://imagekit.io/docs/api-reference/upload-file/upload-file#Request}
+ * Options used when uploading a file using the V1 API.
+ * Check out the official documentation:
+ * {@link https://imagekit.io/docs/api-reference/upload-file/upload-file}
  */
 export interface UploadOptions {
   /**
-   * This field accepts three kinds of values:
-   * - binary - You can send the content of the file as binary. This is used when a file is being uploaded from the browser.
-   * - base64 - Base64 encoded string of file content.
-   * - url - URL of the file from where to download the content before uploading.
-   *      Downloading file from URL might take longer, so it is recommended that you pass the binary or base64 content of the file.
-   *      Pass the full URL, for example - https://www.example.com/rest-of-the-image-path.jpg.
+   * This field accepts three main input formats for the file content:
+   * - "binary": Directly pass the binary data. Typically used when uploading via the browser using a File or Blob.
+   * - "base64": A base64-encoded string of the file content.
+   * - "url": A direct URL from which ImageKit server will download the file and upload.
    */
   file: string | Blob | File;
+
   /**
-   * HMAC-SHA1 digest of the token+expire using your ImageKit.io private API key as a key. This should be in lowercase.
-   * Warning: Signature must be calculated on the server-side. This field is required for authentication when uploading a file from the client-side.
+   * The name with which the file should be uploaded.
+   * - Valid characters: alphanumeric (a-z, A-Z, 0-9, including Unicode letters and numerals) and the special chars ". _ -"
+   * - Any other character (including space) is replaced with "_"
+   *
+   * Example: "company_logo.png"
+   */
+  fileName: string;
+
+  /**
+   * The HMAC-SHA1 digest of the concatenation of "token + expire". The signing key is your ImageKit private API key.
+   * Required for client-side authentication. Must be computed on the server side.
+   * Calculate this signature in your secure server and pass it to the client.
    */
   signature: string;
+
   /**
-   * A unique value generated by the client, which will be used by the ImageKit.io server to recognize and prevent subsequent retries for the same request. We suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions.
-   * Note: Sending a value that has been used in the past will result in a validation error. Even if your previous request resulted in an error, you should always send a new value for this field.
+   * A unique value to identify and prevent replays. Typically a UUID (e.g., version 4).
+   * Each request must carry a fresh token. The server rejects reused tokens, even if the original request failed.
    */
   token: string;
+
   /**
-   * The time until your signature is valid. It must be a Unix time in less than 1 hour into the future. It should be in seconds.
+   * A Unix timestamp in seconds, less than 1 hour in the future.
    */
   expire: number;
+
   /**
-   * The name with which the file has to be uploaded.
-   * The file name can contain:
-   * - Alphanumeric Characters: a-z , A-Z , 0-9 (including unicode letters, marks, and numerals in other languages)
-   * - Special Characters: . _ and -
-   * Any other character including space will be replaced by _
+   * The public API key of your ImageKit account. You can find it in the [ImageKit dashboard](https://imagekit.io/dashboard/developer/api-keys).
    */
-  fileName: string;
+  publicKey: string;
+
   /**
    * Whether to use a unique filename for this file or not.
    * - Accepts true or false.
@@ -65,85 +92,105 @@ export interface UploadOptions {
    * Default value - true
    */
   useUniqueFileName?: boolean;
+
   /**
-   * Set the tags while uploading the file.
-   * - Comma-separated value of tags in format tag1,tag2,tag3. For example - t-shirt,round-neck,men
-   * - The maximum length of all characters should not exceed 500.
-   * - % is not allowed.
-   * - If this field is not specified and the file is overwritten then the tags will be removed.
+   * Optionally set tags on the uploaded file.
+   * If passing an array, the SDK automatically joins them into a comma-separated string when sending to the server.
+   * Example: ["t-shirt", "round-neck", "men"] => "t-shirt,round-neck,men"
    */
   tags?: string | string[];
+
   /**
-   * The folder path (e.g. /images/folder/) in which the image has to be uploaded. If the folder(s) didn't exist before, a new folder(s) is created.
-   * The folder name can contain:
-   * - Alphanumeric Characters: a-z , A-Z , 0-9 (including unicode letters, marks, and numerals in other languages)
-   * - Special Characters: / _ and -
-   * - Using multiple / creates a nested folder.
-   * Default value - /
+   * The folder path where the file will be stored, e.g., "/images/folder/".
+   * - If the path doesn't exist, it is created on-the-fly.
+   * - Nested folders are supported by using multiple "/".
+   * - Default: "/"
    */
   folder?: string;
+
   /**
-   * Whether to mark the file as private or not. This is only relevant for image type files.
-   * - Accepts true or false.
-   * - If set true, the file is marked as private which restricts access to the original image URL and unnamed image transformations without signed URLs.
-   *      Without the signed URL, only named transformations work on private images
-   * Default value - false
+   * Whether to mark the file as private (only relevant for image uploads).
+   * A private file requires signed URLs or named transformations for access.
+   * Default: false
    */
   isPrivateFile?: boolean;
+
   /**
-   * Define an important area in the image. This is only relevant for image type files.
-   * To be passed as a string with the x and y coordinates of the top-left corner, and width and height of the area of interest in format x,y,width,height. For example - 10,10,100,100
-   * Can be used with fo-customtransformation.
-   * If this field is not specified and the file is overwritten, then customCoordinates will be removed.
+   * A string in "x,y,width,height" format that defines the region of interest in an image (top-left coords and area size).
+   * Example: "10,10,100,100".
    */
   customCoordinates?: string;
+
   /**
-   * Comma-separated values of the fields that you want ImageKit.io to return in response.
-   *
-   * For example, set the value of this field to tags,customCoordinates,isPrivateFile,metadata to get value of tags, customCoordinates, isPrivateFile , and metadata in the response.
+   * A comma-separated or array-based set of fields to return in the upload response.
+   * Example: "tags,customCoordinates,isPrivateFile,metadata"
    */
   responseFields?: string | string[];
-  /* 
-   * Object with array of extensions to be processed on the image.
+
+  /**
+   * An array of extension objects to apply to the image, e.g. background removal, auto-tagging, etc.
+   * The SDK will JSON-stringify this array automatically before sending.
    */
   extensions?: object[];
-  /*
-   * Final status of pending extensions will be sent to this URL. 
+
+  /**
+   * A webhook URL to receive the final status of any pending extensions once they've completed processing.
+   */
+  webhookUrl?: string;
+
+  /**
+   * Defaults to true. If false, and "useUniqueFileName" is also false, the API immediately fails if a file with the same name/folder already exists.
+   */
+  overwriteFile?: boolean;
+
+  /**
+   * Defaults to true. If true, and an existing file is found at the same location, its AITags are removed. Set to false to keep existing AITags.
    */
-  webhookUrl?: string
-  /*
-   * Default is true. If overwriteFile is set to false and useUniqueFileName is also false, and a file already exists at the exact location, upload API will return an error immediately.
+  overwriteAITags?: boolean;
+
+  /**
+   * Defaults to true. If no tags are specified in the request, existing tags are removed from overwritten files. Setting to false has no effect if the request includes tags.
    */
-  overwriteFile?: boolean
-  /*
-   * Default is true. If set to true and a file already exists at the exact location, its AITags will be removed. Set overwriteAITags to false to preserve AITags.
+  overwriteTags?: boolean;
+
+  /**
+   * Defaults to true. If no customMetadata is specified in the request, existing customMetadata is removed from overwritten files. Setting to false has no effect if the request specifies customMetadata.
    */
-  overwriteAITags?: boolean
-  /*
-   * Default is true. If the request does not have tags , overwriteTags is set to true and a file already exists at the exact location, existing tags will be removed.
-   * In case the request body has tags, setting overwriteTags to false has no effect and request's tags are set on the asset.
+  overwriteCustomMetadata?: boolean;
+
+  /**
+   * A stringified JSON or an object containing custom metadata fields to store with the file.
+   * Custom metadata fields must be pre-defined in your ImageKit configuration.
    */
-  overwriteTags?: boolean
-  /*
-   * Default is true. If the request does not have customMetadata , overwriteCustomMetadata is set to true and a file already exists at the exact location, exiting customMetadata will be removed.
-   * In case the request body has customMetadata, setting overwriteCustomMetadata to false has no effect and request's customMetadata is set on the asset.
+  customMetadata?: string | Record<string, string | number | boolean | Array<string | number | boolean>>;
+
+  /**
+   * Defines pre and post transformations to be applied to the file during upload. The SDK enforces certain validation rules for pre/post transformations.
+   * For details, see:
+   * {@link https://imagekit.io/docs/dam/pre-and-post-transformation-on-upload}
    */
-  overwriteCustomMetadata?: boolean
-  /*
-   * Stringified JSON key-value data to be associated with the asset. Checkout overwriteCustomMetadata parameter to understand default behaviour.
-   * Before setting any custom metadata on an asset you have to create the field using custom metadata fields API.
+  transformation?: Transformation;
+
+  /**
+   * An optional XMLHttpRequest instance for the upload. The SDK merges it with its own logic to handle progress events, etc.
+   * You can listen to `progress` or other events on this object for custom logic.
    */
-  customMetadata?: string | Record<string, string | number | boolean | Array<string | number | boolean>>
+  xhr?: XMLHttpRequest;
 
-  transformation?: Transformation
+  /**
+   * A string specifying the checks to be performed server-side before uploading to the media library, e.g. size or mime type checks.
+   * For format details, see: {@link https://imagekit.io/docs/api-reference/upload-file/upload-file#upload-api-checks}
+   */
+  checks?: string;
 
   /**
-   * Optional XMLHttpRequest object that you can send for upload API request. You can listen to `progress` and other events on this object for any custom logic. 
+   * Optional callback function that will be called with the progress event when the file is being uploaded.
    */
-  xhr?: XMLHttpRequest
+  onProgress?: (event: ProgressEvent) => void;
 
   /**
-   * Optional `checks` parameters can be used to run server-side checks before files are uploaded to the Media Library.
+   * An AbortSignal instance that can be used to cancel the request if needed.
+   * When aborted, the request fails with an ImageKitAbortError.
    */
-  checks?: string
+  abortSignal?: AbortSignal;
 }
diff --git a/src/interfaces/UploadResponse.ts b/src/interfaces/UploadResponse.ts
index b38cf27..dbae9c0 100644
--- a/src/interfaces/UploadResponse.ts
+++ b/src/interfaces/UploadResponse.ts
@@ -6,7 +6,7 @@
  *
  * {@link https://imagekit.io/docs/api-reference/digital-asset-management-dam/list-and-search-assets}
  */
-export type FileType = "all" | "image" | "non-image";
+type FileType = "all" | "image" | "non-image";
 
 /**
  * Metadata object structure
@@ -23,7 +23,7 @@ export type FileType = "all" | "image" | "non-image";
  * 
  * Perceptual hashing allows you to construct a hash value that uniquely identifies an input image based on the image's contents. It is different from cryptographic hash functions like MD5 and SHA1. pHash provides similar hash value after minor distortions, like small rotations, blurring, and compression in the image.
  */
-export interface Metadata {
+interface Metadata {
   height: number;
   width: number;
   size: number;
@@ -94,8 +94,14 @@ export interface Metadata {
   };
 }
 
+export interface ResponseMetadata {
+  statusCode: number;
+  requestId: string;
+  headers: Record<string, string | number | boolean>;
+}
+
 /**
- * Response from uploading a file
+ * Response from server when file is uploaded successfully.
  *
  * {@link https://imagekit.io/docs/api-reference/upload-file/upload-file#Responses}
  */
@@ -103,39 +109,39 @@ export interface UploadResponse {
   /**
    * Unique fileId. Store this fileld in your database, as this will be used to perform update action on this file.
    */
-  fileId: string;
+  fileId?: string;
   /**
    * The name of the uploaded file.
    */
-  name: string;
+  name?: string;
   /**
    * The URL of the file.
    */
-  url: string;
+  url?: string;
   /**
    * In case of an image, a small thumbnail URL.
    */
-  thumbnailUrl: string;
+  thumbnailUrl?: string;
   /**
    * Height of the uploaded image file. Only applicable when file type is image.
    */
-  height: number;
+  height?: number;
   /**
    * Width of the uploaded image file. Only applicable when file type is image.
    */
-  width: number;
+  width?: number;
   /**
    * Size of the uploaded file in bytes.
    */
-  size: number;
+  size?: number;
   /**
    * Type of file. It can either be image or non-image.
    */
-  fileType: FileType;
+  fileType?: FileType;
   /**
    * The path of the file uploaded. It includes any folder that you specified while uploading.
    */
-  filePath: string;
+  filePath?: string;
   /**
    * Array of tags associated with the image.
    */
@@ -143,11 +149,11 @@ export interface UploadResponse {
   /**
    * Is the file marked as private. It can be either true or false.
    */
-  isPrivateFile: boolean;
+  isPrivateFile?: boolean;
   /**
    * Value of custom coordinates associated with the image in format x,y,width,height.
    */
-  customCoordinates: string | null;
+  customCoordinates?: string | null;
   /**
    * The metadata of the upload file. Use responseFields property in request to get the metadata returned in response of upload API.
    */
@@ -156,8 +162,21 @@ export interface UploadResponse {
    * AITags field is populated only because the google-auto-tagging extension was executed synchronously and it received a successresponse.
    */
   AITags?: object[];
+
   /*
    * Field object which will contain the status of each extension at the time of completion of the update/upload request.
    */ 
   extensionStatus?: { [key: string]: string }
+
+  /**
+   * Message indicating that the file upload is accepted. This field is only present when the upload is accepted but not yet processed.
+   * This can happen when the file is being processed for pre-transformation for video.
+   * The upload will be completed once the pre-transformation is done.
+   */
+  message?: string
+
+  /**
+   * Response metadata for debugging purposes.
+   */
+  readonly $ResponseMetadata: ResponseMetadata;
 }
diff --git a/src/interfaces/UrlOptions.ts b/src/interfaces/UrlOptions.ts
deleted file mode 100644
index 5d1d38c..0000000
--- a/src/interfaces/UrlOptions.ts
+++ /dev/null
@@ -1,55 +0,0 @@
-import { TransformationPosition } from ".";
-import { Transformation } from "./Transformation";
-
-export interface UrlOptionsBase {
-  /**
-   * An array of objects specifying the transformations to be applied in the URL.
-   * The transformation name and the value should be specified as a key-value pair in each object.
-   * 
-   * {@link https://imagekit.io/docs/transformations#chained-transformations}
-   */
-  transformation?: Array<Transformation>;
-  /**
-   * Default value is path that places the transformation string as a path parameter in the URL.
-   * Can also be specified as query which adds the transformation string as the query parameter tr in the URL.
-   * If you use src parameter to create the URL, then the transformation string is always added as a query parameter.
-   */
-  transformationPosition?: TransformationPosition;
-  /**
-   * These are the other query parameters that you want to add to the final URL.
-   * These can be any query parameters and not necessarily related to ImageKit.
-   * Especially useful, if you want to add some versioning parameter to your URLs.
-   */
-  queryParameters?: { [key: string]: string | number };
-  /**
-   * The base URL to be appended before the path of the image.
-   * If not specified, the URL Endpoint specified at the time of SDK initialization is used.
-   */
-  urlEndpoint?: string;
-}
-
-export interface UrlOptionsSrc extends UrlOptionsBase {
-  /**
-   * Conditional. This is the complete URL of an image already mapped to ImageKit.
-   * For example, https://ik.imagekit.io/your_imagekit_id/endpoint/path/to/image.jpg.
-   * Either the path or src parameter need to be specified for URL generation.
-   */
-  src: string;
-  path?: never;
-}
-
-export interface UrlOptionsPath extends UrlOptionsBase {
-  /**
-   * Conditional. This is the path at which the image exists.
-   * For example, /path/to/image.jpg. Either the path or src parameter need to be specified for URL generation.
-   */
-  path: string;
-  src?: never;
-}
-
-/**
- * Options for generating an URL
- *
- * {@link https://github.com/imagekit-developer/imagekit-javascript#url-generation}
- */
-export type UrlOptions = UrlOptionsSrc | UrlOptionsPath;
diff --git a/src/interfaces/index.ts b/src/interfaces/index.ts
index 50afe5c..5aacf10 100644
--- a/src/interfaces/index.ts
+++ b/src/interfaces/index.ts
@@ -1,7 +1,7 @@
-import { ImageKitOptions } from "./ImageKitOptions";
-import { TransformationPosition } from "./Transformation";
-import { UploadOptions } from "./UploadOptions";
-import { UploadResponse, FileType } from "./UploadResponse";
-import { UrlOptions } from "./UrlOptions";
+// src/interfaces/index.ts
+// Re-export all interfaces so that TypeDoc includes referenced types in the documentation
 
-export type { ImageKitOptions, TransformationPosition, UploadOptions, UploadResponse, FileType, UrlOptions };
+export * from './UploadResponse';
+export * from './UploadOptions';
+export * from './Transformation';
+export * from './SrcOptions';
diff --git a/src/upload.ts b/src/upload.ts
new file mode 100644
index 0000000..e5a8fea
--- /dev/null
+++ b/src/upload.ts
@@ -0,0 +1,272 @@
+import errorMessages from "./constants/errorMessages";
+import type { ResponseMetadata, UploadOptions, UploadResponse } from "./interfaces";
+
+/**
+ * Represents an error when a request to ImageKit is invalid.
+ */
+export class ImageKitInvalidRequestError extends Error {
+  /**
+   * Optional metadata about the response. It is only available if server returns a response.
+   */
+  readonly $ResponseMetadata?: ResponseMetadata;
+  constructor(message: string, responseMetadata?: ResponseMetadata) {
+    super(message);
+    this.name = "ImageKitInvalidRequestError";
+    this.$ResponseMetadata = responseMetadata;
+  }
+}
+
+/**
+ * Represents an error when an upload operation is aborted.
+ */
+export class ImageKitAbortError extends Error {
+  /**
+   * The reason why the operation was aborted, which can be any JavaScript value. If not specified, the reason is set to "AbortError" DOMException.
+   */
+  reason?: unknown;
+  constructor(message: string, reason?: unknown) {
+    super(message);
+    this.name = "ImageKitAbortError";
+    this.reason = reason;
+  }
+}
+
+/**
+ * Represents a network error during an upload operation to ImageKit.
+ */
+export class ImageKitUploadNetworkError extends Error {
+  constructor(message: string) {
+    super(message);
+    this.name = "ImageKitUploadNetworkError";
+  }
+}
+
+/**
+ * Represents a server error from ImageKit during an upload operation.
+ */
+export class ImageKitServerError extends Error {
+  /**
+   * Optional metadata about the response. It is only available if server returns a response.
+   */
+  readonly $ResponseMetadata?: ResponseMetadata;
+  constructor(message: string, responseMetadata?: ResponseMetadata) {
+    super(message);
+    this.name = "ImageKitServerError";
+    this.$ResponseMetadata = responseMetadata;
+  }
+}
+
+/**
+ * Uploads a file to ImageKit with the given upload options. This function uses V1 API, check the [API docs](https://imagekit.io/docs/api-reference/upload-file/upload-file) for more details.
+ *
+ * @throws {ImageKitInvalidRequestError} If the request is invalid.
+ * @throws {ImageKitAbortError} If the request is aborted.
+ * @throws {ImageKitUploadNetworkError} If there is a network error.
+ * @throws {ImageKitServerError} If there is a server error.
+ *
+ * @param {UploadOptions} uploadOptions - The options for uploading the file.
+ * @returns {Promise<UploadResponse>} A Promise resolving to a successful UploadResponse.
+ */
+export const upload = (uploadOptions: UploadOptions): Promise<UploadResponse> => {
+  if(!uploadOptions) {
+    return Promise.reject(new ImageKitInvalidRequestError("Invalid options provided for upload"));
+  }
+  return new Promise((resolve, reject) => {
+    const { xhr: userProvidedXHR } = uploadOptions || {};
+    delete uploadOptions.xhr;
+    const xhr = userProvidedXHR || new XMLHttpRequest();
+
+    if (!uploadOptions.file) {
+      return reject(new ImageKitInvalidRequestError(errorMessages.MISSING_UPLOAD_FILE_PARAMETER.message));
+    }
+
+    if (!uploadOptions.fileName) {
+      return reject(new ImageKitInvalidRequestError(errorMessages.MISSING_UPLOAD_FILENAME_PARAMETER.message));
+    }
+
+    if (!uploadOptions.publicKey || uploadOptions.publicKey.length === 0) {
+      return reject(new ImageKitInvalidRequestError(errorMessages.MISSING_PUBLIC_KEY.message));
+    }
+
+    if (!uploadOptions.token) {
+      return reject(new ImageKitInvalidRequestError(errorMessages.MISSING_TOKEN.message));
+    }
+
+    if (!uploadOptions.signature) {
+      return reject(new ImageKitInvalidRequestError(errorMessages.MISSING_SIGNATURE.message));
+    }
+
+    if (!uploadOptions.expire) {
+      return reject(new ImageKitInvalidRequestError(errorMessages.MISSING_EXPIRE.message));
+    }
+
+    if (uploadOptions.transformation) {
+      if (!(Object.keys(uploadOptions.transformation).includes("pre") || Object.keys(uploadOptions.transformation).includes("post"))) {
+        return reject(new ImageKitInvalidRequestError(errorMessages.INVALID_TRANSFORMATION.message));
+      }
+      if (Object.keys(uploadOptions.transformation).includes("pre") && !uploadOptions.transformation.pre) {
+        return reject(new ImageKitInvalidRequestError(errorMessages.INVALID_PRE_TRANSFORMATION.message));
+      }
+      if (Object.keys(uploadOptions.transformation).includes("post")) {
+        if (Array.isArray(uploadOptions.transformation.post)) {
+          for (let transformation of uploadOptions.transformation.post) {
+            if (transformation.type === "abs" && !(transformation.protocol || transformation.value)) {
+              return reject(new ImageKitInvalidRequestError(errorMessages.INVALID_POST_TRANSFORMATION.message));
+            } else if (transformation.type === "transformation" && !transformation.value) {
+              return reject(new ImageKitInvalidRequestError(errorMessages.INVALID_POST_TRANSFORMATION.message));
+            }
+          }
+        } else {
+          return reject(new ImageKitInvalidRequestError(errorMessages.INVALID_POST_TRANSFORMATION.message));
+        }
+      }
+    }
+
+    var formData = new FormData();
+    let key: keyof typeof uploadOptions;
+    for (key in uploadOptions) {
+      if (key) {
+        if (key === "file" && typeof uploadOptions.file != "string") {
+          formData.set('file', uploadOptions.file, String(uploadOptions.fileName));
+        } else if (key === "tags" && Array.isArray(uploadOptions.tags)) {
+          formData.set('tags', uploadOptions.tags.join(","));
+        } else if (key === 'signature') {
+          formData.set("signature", uploadOptions.signature);
+        } else if (key === 'expire') {
+          formData.set("expire", String(uploadOptions.expire));
+        } else if (key === 'token') {
+          formData.set("token", uploadOptions.token);
+        } else if (key === "responseFields" && Array.isArray(uploadOptions.responseFields)) {
+          formData.set('responseFields', uploadOptions.responseFields.join(","));
+        } else if (key === "extensions" && Array.isArray(uploadOptions.extensions)) {
+          formData.set('extensions', JSON.stringify(uploadOptions.extensions));
+        } else if (key === "customMetadata" && typeof uploadOptions.customMetadata === "object" &&
+          !Array.isArray(uploadOptions.customMetadata) && uploadOptions.customMetadata !== null) {
+          formData.set('customMetadata', JSON.stringify(uploadOptions.customMetadata));
+        } else if (key === "transformation" && typeof uploadOptions.transformation === "object" &&
+          uploadOptions.transformation !== null) {
+          formData.set(key, JSON.stringify(uploadOptions.transformation));
+        } else if (key === 'checks' && uploadOptions.checks) {
+          formData.set("checks", uploadOptions.checks);
+        } else if (uploadOptions[key] !== undefined) {
+          if (["onProgress", "abortSignal"].includes(key)) continue;
+          formData.set(key, String(uploadOptions[key]));
+        }
+      }
+    }
+
+    if (uploadOptions.onProgress) {
+      xhr.upload.onprogress = function (event: ProgressEvent) {
+        if (uploadOptions.onProgress) uploadOptions.onProgress(event)
+      };
+    }
+
+    function onAbortHandler() {
+      xhr.abort();
+      return reject(new ImageKitAbortError(
+        "Upload aborted",
+        uploadOptions.abortSignal?.reason
+      ));
+    }
+
+    if (uploadOptions.abortSignal) {
+      if (uploadOptions.abortSignal.aborted) {
+        // If the signal is already aborted, return immediately with the reason
+
+        return reject(new ImageKitAbortError(
+          "Upload aborted",
+          uploadOptions.abortSignal?.reason
+        ));
+      }
+
+      // If the signal is not already aborted, add an event listener to abort the request when the signal is aborted
+      uploadOptions.abortSignal.addEventListener("abort", onAbortHandler);
+
+      // On XHR completion (success, fail, or abort), remove just this abort handler
+      xhr.addEventListener("loadend", () => {
+        if (uploadOptions.abortSignal) {
+          uploadOptions.abortSignal.removeEventListener("abort", onAbortHandler);
+        }
+      });
+    }
+
+    xhr.open('POST', 'https://upload.imagekit.io/api/v1/files/upload');
+    xhr.onerror = function (e) {
+      return reject(new ImageKitUploadNetworkError(errorMessages.UPLOAD_ENDPOINT_NETWORK_ERROR.message));
+    }
+    xhr.onload = function () {
+      if (xhr.status >= 200 && xhr.status < 300) {
+        try {
+          var body = JSON.parse(xhr.responseText);
+          var uploadResponse = addResponseHeadersAndBody(body, xhr);
+          return resolve(uploadResponse);
+        } catch (ex: any) {
+          return reject(ex);
+        }
+      } else if (xhr.status >= 400 && xhr.status < 500) {
+        // Send ImageKitInvalidRequestError
+        try {
+          var body = JSON.parse(xhr.responseText);
+          return reject(new ImageKitInvalidRequestError(
+            body.message ?? "Invalid request. Please check the parameters.",
+            getResponseMetadata(xhr)
+          ));
+        } catch (ex: any) {
+          return reject(ex);
+        }
+      } else {
+        // Send ImageKitServerError
+        try {
+          var body = JSON.parse(xhr.responseText);
+          return reject(new ImageKitServerError(
+            body.message ?? "Server error occurred while uploading the file. This is rare and usually temporary.",
+            getResponseMetadata(xhr)
+          ));
+        } catch (ex: any) {
+          return reject(new ImageKitServerError(
+            "Server error occurred while uploading the file. This is rare and usually temporary.",
+            getResponseMetadata(xhr)
+          ));
+        }
+      }
+    };
+    xhr.send(formData);
+  });
+};
+
+
+const addResponseHeadersAndBody = (body: any, xhr: XMLHttpRequest) => {
+  let response = { ...body };
+  const responseMetadata = getResponseMetadata(xhr);
+  Object.defineProperty(response, "$ResponseMetadata", {
+    value: responseMetadata,
+    enumerable: false,
+    writable: false
+  });
+  return response;
+}
+
+const getResponseMetadata = (xhr: XMLHttpRequest): ResponseMetadata => {
+  const headers = getResponseHeaderMap(xhr);
+  const responseMetadata = {
+    statusCode: xhr.status,
+    headers: headers,
+    requestId: headers["x-request-id"]
+  }
+  return responseMetadata;
+}
+
+function getResponseHeaderMap(xhr: XMLHttpRequest): Record<string, string> {
+  const headers: Record<string, string> = {};
+  const responseHeaders = xhr.getAllResponseHeaders();
+  if (Object.keys(responseHeaders).length) {
+    responseHeaders
+      .trim()
+      .split(/[\r\n]+/)
+      .map(value => value.split(/: /))
+      .forEach(keyValue => {
+        headers[keyValue[0].trim().toLowerCase()] = keyValue[1].trim();
+      });
+  }
+  return headers;
+}
diff --git a/src/upload/index.ts b/src/upload/index.ts
deleted file mode 100644
index 3d4915a..0000000
--- a/src/upload/index.ts
+++ /dev/null
@@ -1,104 +0,0 @@
-import errorMessages from "../constants/errorMessages";
-import respond from "../utils/respond";
-import { request } from "../utils/request";
-import { ImageKitOptions, UploadOptions, UploadResponse } from "../interfaces";
-
-export const upload = (
-  xhr: XMLHttpRequest,
-  uploadOptions: UploadOptions,
-  options: ImageKitOptions,
-  callback?: (err: Error | null, response: UploadResponse | null) => void,
-) => {
-  if (!uploadOptions.file) {
-    respond(true, errorMessages.MISSING_UPLOAD_FILE_PARAMETER, callback);
-    return;
-  }
-
-  if (!uploadOptions.fileName) {
-    respond(true, errorMessages.MISSING_UPLOAD_FILENAME_PARAMETER, callback);
-    return;
-  }
-
-  if (!options.publicKey) {
-    respond(true, errorMessages.MISSING_PUBLIC_KEY, callback);
-    return;
-  }
-
-  if(!uploadOptions.token) {
-    respond(true, errorMessages.MISSING_TOKEN, callback)
-    return
-  }
-
-  if(!uploadOptions.signature) {
-    respond(true, errorMessages.MISSING_SIGNATURE, callback)
-    return
-  }
-
-  if(!uploadOptions.expire) {
-    respond(true, errorMessages.MISSING_EXPIRE, callback)
-    return
-  }
-
-  if (uploadOptions.transformation) {
-    if (!(Object.keys(uploadOptions.transformation).includes("pre") || Object.keys(uploadOptions.transformation).includes("post"))) {
-      respond(true, errorMessages.INVALID_TRANSFORMATION, callback);
-      return;
-    }
-    if (Object.keys(uploadOptions.transformation).includes("pre") && !uploadOptions.transformation.pre) {
-      respond(true, errorMessages.INVALID_PRE_TRANSFORMATION, callback);
-      return;
-    }
-    if (Object.keys(uploadOptions.transformation).includes("post")) {
-      if (Array.isArray(uploadOptions.transformation.post)) {
-        for (let transformation of uploadOptions.transformation.post) {
-          if (transformation.type === "abs" && !(transformation.protocol || transformation.value)) {
-            respond(true, errorMessages.INVALID_POST_TRANSFORMATION, callback);
-            return;
-          } else if (transformation.type === "transformation" && !transformation.value) {
-            respond(true, errorMessages.INVALID_POST_TRANSFORMATION, callback);
-            return;
-          }
-        }
-      } else {
-        respond(true, errorMessages.INVALID_POST_TRANSFORMATION, callback);
-        return;
-      }
-    }
-  }
-
-  var formData = new FormData();
-  let key: keyof typeof uploadOptions;
-  for (key in uploadOptions) {
-    if (key) {
-      if (key === "file" && typeof uploadOptions.file != "string") {
-        formData.append('file', uploadOptions.file, String(uploadOptions.fileName));
-      } else if (key === "tags" && Array.isArray(uploadOptions.tags)) {
-        formData.append('tags', uploadOptions.tags.join(",")); 
-      } else if (key === 'signature') {
-        formData.append("signature", uploadOptions.signature);
-      } else if (key === 'expire') {
-        formData.append("expire", String(uploadOptions.expire));
-      } else if (key === 'token') {
-        formData.append("token", uploadOptions.token);
-      } else if (key === "responseFields" && Array.isArray(uploadOptions.responseFields)) {
-        formData.append('responseFields', uploadOptions.responseFields.join(","));
-      } else if (key === "extensions" && Array.isArray(uploadOptions.extensions)) {
-        formData.append('extensions', JSON.stringify(uploadOptions.extensions));
-      } else if (key === "customMetadata" && typeof uploadOptions.customMetadata === "object" &&
-        !Array.isArray(uploadOptions.customMetadata) && uploadOptions.customMetadata !== null) {
-        formData.append('customMetadata', JSON.stringify(uploadOptions.customMetadata));
-      } else if(key === "transformation" && typeof uploadOptions.transformation === "object" &&
-        uploadOptions.transformation !== null) {
-        formData.append(key, JSON.stringify(uploadOptions.transformation));
-      } else if (key === 'checks' && uploadOptions.checks) {
-        formData.append("checks", uploadOptions.checks);
-      } else if(uploadOptions[key] !== undefined) {
-        formData.append(key, String(uploadOptions[key]));
-      }
-    }
-  }
-
-  formData.append("publicKey", options.publicKey);
-
-  request(xhr, formData, callback);
-};
diff --git a/src/url/builder.ts b/src/url.ts
similarity index 83%
rename from src/url/builder.ts
rename to src/url.ts
index cc49a1b..836bb8e 100644
--- a/src/url/builder.ts
+++ b/src/url.ts
@@ -1,6 +1,6 @@
-import { ImageKitOptions, UrlOptions } from "../interfaces";
-import { ImageOverlay, SolidColorOverlay, SubtitleOverlay, TextOverlay, Transformation, VideoOverlay } from "../interfaces/Transformation";
-import transformationUtils, { safeBtoa } from "../utils/transformation";
+import type { SrcOptions } from "./interfaces";
+import type { ImageOverlay, SolidColorOverlay, SubtitleOverlay, TextOverlay, Transformation, VideoOverlay } from "./interfaces/Transformation";
+import transformationUtils, { safeBtoa } from "./utils/transformation";
 const TRANSFORMATION_PARAMETER = "tr";
 const SIMPLE_OVERLAY_PATH_REGEX = new RegExp('^[a-zA-Z0-9-._/ ]*$')
 const SIMPLE_OVERLAY_TEXT_REGEX = new RegExp('^[a-zA-Z0-9-._ ]*$') // These characters are selected by testing actual URLs on both path and query parameters. If and when backend starts supporting wide range of characters, this regex should be updated to improve URL readability.
@@ -25,17 +25,29 @@ function pathJoin(parts: string[], sep?: string) {
   return parts.join(separator).replace(replace, separator);
 }
 
-export const buildURL = (opts: UrlOptions & ImageKitOptions) => {
-  if (!opts.path && !opts.src) {
+/**
+ * Builds a source URL with the given options.
+ *
+ * @param {SrcOptions} opts - The options for building the source URL.
+ * @returns {string} The constructed source URL.
+ */
+export const buildSrc = (opts: SrcOptions): string => {
+  opts.urlEndpoint = opts.urlEndpoint || "";
+  opts.src = opts.src || "";
+  opts.transformationPosition = opts.transformationPosition || "query";
+
+  if (!opts.src) {
     return "";
   }
 
+  const isAbsoluteURL = opts.src.startsWith("http://") || opts.src.startsWith("https://");
+
   var urlObj, isSrcParameterUsedForURL, urlEndpointPattern;
 
   try {
-    if (opts.path) {
+    if (!isAbsoluteURL) {
       urlEndpointPattern = new URL(opts.urlEndpoint).pathname;
-      urlObj = new URL(pathJoin([opts.urlEndpoint.replace(urlEndpointPattern, ""), opts.path]));
+      urlObj = new URL(pathJoin([opts.urlEndpoint.replace(urlEndpointPattern, ""), opts.src]));
     } else {
       urlObj = new URL(opts.src!);
       isSrcParameterUsedForURL = true;
@@ -49,7 +61,7 @@ export const buildURL = (opts: UrlOptions & ImageKitOptions) => {
     urlObj.searchParams.append(i, String(opts.queryParameters[i]));
   }
 
-  var transformationString = constructTransformationString(opts.transformation);
+  var transformationString = buildTransformationString(opts.transformation);
 
   if (transformationString && transformationString.length) {
     if (!transformationUtils.addAsQueryParameter(opts) && !isSrcParameterUsedForURL) {
@@ -57,7 +69,7 @@ export const buildURL = (opts: UrlOptions & ImageKitOptions) => {
         TRANSFORMATION_PARAMETER + transformationUtils.getChainTransformDelimiter() + transformationString,
         urlObj.pathname,
       ]);
-    } 
+    }
   }
 
   if (urlEndpointPattern) {
@@ -67,8 +79,8 @@ export const buildURL = (opts: UrlOptions & ImageKitOptions) => {
   }
 
   if (transformationString && transformationString.length) {
-    if(transformationUtils.addAsQueryParameter(opts) || isSrcParameterUsedForURL) {
-      if(urlObj.searchParams.toString() !== "") { // In 12 node.js .size was not there. So, we need to check if it is an object or not.
+    if (transformationUtils.addAsQueryParameter(opts) || isSrcParameterUsedForURL) {
+      if (urlObj.searchParams.toString() !== "") { // In 12 node.js .size was not there. So, we need to check if it is an object or not.
         return `${urlObj.href}&${TRANSFORMATION_PARAMETER}=${transformationString}`;
       }
       else {
@@ -83,10 +95,10 @@ export const buildURL = (opts: UrlOptions & ImageKitOptions) => {
 function processInputPath(str: string, enccoding: string): string {
   // Remove leading and trailing slashes
   str = removeTrailingSlash(removeLeadingSlash(str));
-  if(enccoding === "plain") {
+  if (enccoding === "plain") {
     return `i-${str.replace(/\//g, "@@")}`;
   }
-  if(enccoding === "base64") {
+  if (enccoding === "base64") {
     return `ie-${encodeURIComponent(safeBtoa(str))}`;
   }
   if (SIMPLE_OVERLAY_PATH_REGEX.test(str)) {
@@ -111,13 +123,11 @@ function processText(str: string, enccoding: TextOverlay["encoding"]): string {
 
 function processOverlay(overlay: Transformation["overlay"]): string | undefined {
   const entries = [];
-  if (!overlay) {
-    return;
-  }
-  const { type, position = {}, timing = {}, transformation = [] } = overlay;
+
+  const { type, position = {}, timing = {}, transformation = [] } = overlay || {};
 
   if (!type) {
-    throw new Error("Overlay type is required");
+    return;
   }
 
   switch (type) {
@@ -205,7 +215,7 @@ function processOverlay(overlay: Transformation["overlay"]): string | undefined
     entries.push(`ldu-${duration}`);
   }
 
-  const transformationString = constructTransformationString(transformation);
+  const transformationString = buildTransformationString(transformation);
 
   if (transformationString && transformationString.trim() !== "") entries.push(transformationString);
 
@@ -214,7 +224,13 @@ function processOverlay(overlay: Transformation["overlay"]): string | undefined
   return entries.join(transformationUtils.getTransformDelimiter());
 }
 
-function constructTransformationString(transformation: Transformation[] | undefined) {
+/**
+ * Builds a transformation string from the given transformations.
+ *
+ * @param {Transformation[] | undefined} transformation - The transformations to apply.
+ * @returns {string} The constructed transformation string.
+ */
+export const buildTransformationString = function (transformation: Transformation[] | undefined): string {
   if (!Array.isArray(transformation)) {
     return "";
   }
diff --git a/src/url/index.ts b/src/url/index.ts
deleted file mode 100644
index 8503b76..0000000
--- a/src/url/index.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-/*
-    URL builder
-*/
-import { ImageKitOptions, UrlOptions } from "../interfaces";
-import { buildURL } from "./builder";
-
-export const url = (urlOpts: UrlOptions, defaultOptions: ImageKitOptions) => {
-  return buildURL({
-    ...defaultOptions,
-    ...urlOpts,
-  });
-};
diff --git a/src/utils/request.ts b/src/utils/request.ts
deleted file mode 100644
index fd7688d..0000000
--- a/src/utils/request.ts
+++ /dev/null
@@ -1,83 +0,0 @@
-import respond from "../utils/respond";
-import errorMessages from "../constants/errorMessages"
-import { ImageKitOptions, UploadResponse } from "../interfaces";
-import IKResponse from "../interfaces/IKResponse";
-
-interface SignatureResponse {
-    signature: string
-    expire: number
-    token: string
-}
-
-function getResponseHeaderMap(xhr: XMLHttpRequest) {
-    const headers: Record<string, string | number | boolean> = {};
-    const responseHeaders = xhr.getAllResponseHeaders();
-    if (Object.keys(responseHeaders).length) {
-        responseHeaders
-            .trim()
-            .split(/[\r\n]+/)
-            .map(value => value.split(/: /))
-            .forEach(keyValue => {
-                headers[keyValue[0].trim()] = keyValue[1].trim();
-            });
-    }
-    return headers;
-}
-
-const addResponseHeadersAndBody = (body: any, xhr: XMLHttpRequest): IKResponse<UploadResponse> => {
-    let response = { ...body };
-    const responseMetadata = {
-        statusCode: xhr.status,
-        headers: getResponseHeaderMap(xhr)
-    }
-    Object.defineProperty(response, "$ResponseMetadata", {
-        value: responseMetadata,
-        enumerable: false,
-        writable: false
-    });
-    return response as IKResponse<UploadResponse>;
-}
-
-export const request = (
-    uploadFileXHR: XMLHttpRequest,
-    formData: FormData,
-    callback?: (err: Error | null, response: UploadResponse | null) => void) => {
-        
-    uploadFile(uploadFileXHR, formData).then((result) => {
-        return respond(false, result, callback);
-    }, (ex) => {
-        return respond(true, ex, callback);
-    });
-}
-
-export const uploadFile = (
-    uploadFileXHR: XMLHttpRequest,
-    formData: FormData
-): Promise<IKResponse<UploadResponse> | Error> => {
-    return new Promise((resolve, reject) => {
-        uploadFileXHR.open('POST', 'https://upload.imagekit.io/api/v1/files/upload');
-        uploadFileXHR.onerror = function (e) {
-            return reject(errorMessages.UPLOAD_ENDPOINT_NETWORK_ERROR);
-        }
-        uploadFileXHR.onload = function () {
-            if (uploadFileXHR.status === 200) {
-                try {
-                    var body = JSON.parse(uploadFileXHR.responseText);
-                    var uploadResponse = addResponseHeadersAndBody(body, uploadFileXHR);
-                    return resolve(uploadResponse);
-                } catch (ex: any) {
-                    return reject(ex);
-                }
-            } else {
-                try {
-                    var body = JSON.parse(uploadFileXHR.responseText);
-                    var uploadError = addResponseHeadersAndBody(body, uploadFileXHR);
-                    return reject(uploadError)
-                } catch (ex: any) {
-                    return reject(ex);
-                }
-            }
-        };
-        uploadFileXHR.send(formData);
-    });
-}
diff --git a/src/utils/respond.ts b/src/utils/respond.ts
deleted file mode 100644
index 06d02f6..0000000
--- a/src/utils/respond.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-export default function(isError: boolean, response: any, callback?: (err: Error | null, response: any) => void) {
-    if(typeof callback == "function") { 
-        if(isError) {
-            callback(response, null);
-        } else {
-            callback(null, response);
-        }
-    }    
-};
\ No newline at end of file
diff --git a/src/utils/transformation.ts b/src/utils/transformation.ts
index 5034d0f..324fef0 100644
--- a/src/utils/transformation.ts
+++ b/src/utils/transformation.ts
@@ -1,25 +1,16 @@
 import supportedTransforms from "../constants/supportedTransforms";
-import { ImageKitOptions, TransformationPosition } from "../interfaces";
+import { TransformationPosition, SrcOptions } from "../interfaces";
 
 const QUERY_TRANSFORMATION_POSITION: TransformationPosition = "query";
 const PATH_TRANSFORMATION_POSITION: TransformationPosition = "path";
-const DEFAULT_TRANSFORMATION_POSITION: TransformationPosition = QUERY_TRANSFORMATION_POSITION;
-const VALID_TRANSFORMATION_POSITIONS = [PATH_TRANSFORMATION_POSITION, QUERY_TRANSFORMATION_POSITION];
 const CHAIN_TRANSFORM_DELIMITER: string = ":";
 const TRANSFORM_DELIMITER: string = ",";
 const TRANSFORM_KEY_VALUE_DELIMITER: string = "-";
 
 export default {
-    getDefault: (): TransformationPosition => {
-        return DEFAULT_TRANSFORMATION_POSITION;
-    },
-    addAsQueryParameter: (options: ImageKitOptions) => {
+    addAsQueryParameter: (options: SrcOptions) => {
         return options.transformationPosition === QUERY_TRANSFORMATION_POSITION;
     },
-    validParameters: (options: ImageKitOptions) => {
-        if (typeof options.transformationPosition == "undefined") return false;
-        return VALID_TRANSFORMATION_POSITIONS.indexOf(options.transformationPosition) != -1;
-    },
     getTransformKey: function (transform: string) {
         if (!transform) { return ""; }
 
@@ -38,6 +29,7 @@ export default {
 
 export const safeBtoa = function (str: string): string {
     if (typeof window !== "undefined") {
+        /* istanbul ignore next */
         return btoa(str);
     } else {
         // Node fallback
diff --git a/test/data/index.js b/test/data/index.js
deleted file mode 100644
index 1ec1645..0000000
--- a/test/data/index.js
+++ /dev/null
@@ -1,5 +0,0 @@
-module.exports.initializationParams = {
-    publicKey: "test_public_key",
-    urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
-    transformationPosition: "path",
-}
\ No newline at end of file
diff --git a/test/initialization.js b/test/initialization.js
deleted file mode 100644
index b3695ed..0000000
--- a/test/initialization.js
+++ /dev/null
@@ -1,70 +0,0 @@
-const chai = require("chai");
-const expect = chai.expect;
-const initializationParams = require("./data").initializationParams
-import ImageKit from "../src/index";
-
-
-describe("Initialization checks", function () {
-    var imagekit = new ImageKit(initializationParams);
-
-    it('should throw error: options - empty object', function () {
-        try {
-            new ImageKit({});
-        } catch(err) {
-            expect(err.message).to.be.equal('Missing urlEndpoint during SDK initialization');
-        }
-    });
-
-    it('should throw error: options - undefined', function () {
-        try {
-            new ImageKit();
-        } catch(err) {
-            expect(err.message).to.be.equal('Missing urlEndpoint during SDK initialization');
-        }
-    });
-
-    it('Pass private Key', function () {
-        try {
-            new ImageKit({
-                urlEndpoint: initializationParams.urlEndpoint,
-                privateKey: "should_not_pass"
-            });
-        } catch(err) {
-            expect(err.message).to.be.equal('privateKey should not be passed on the client side');
-        }
-    });
-
-    it('should have options object', function () {
-        expect(imagekit.options).to.be.an('object');
-    });
-
-    it('should have correctly initialized options object.', function () {
-        expect(imagekit.options).to.have.property('publicKey').to.be.equal(initializationParams.publicKey);
-        expect(imagekit.options).to.have.property('urlEndpoint').to.be.equal(initializationParams.urlEndpoint);
-    });
-
-    it("should have callable functions 'url' and 'upload'", function () {
-        expect(imagekit.url).to.exist.and.to.be.a('function');
-        expect(imagekit.upload).to.exist.and.to.be.a('function');
-    });
-
-    it('only urlEndpoint is required parameter', function () {
-        let imagekit = new ImageKit({
-            urlEndpoint: initializationParams.urlEndpoint
-        });
-
-        expect(imagekit.options).to.be.an('object');
-        expect(imagekit.options).to.have.property('urlEndpoint').to.be.equal(initializationParams.urlEndpoint);
-        expect(imagekit.url).to.exist.and.to.be.a('function');
-        expect(imagekit.upload).to.exist.and.to.be.a('function');
-
-    });
-
-    it('should throw error: invalid transformationPosition', function () {
-        try {
-            new ImageKit({...initializationParams, transformationPosition: "test"});
-        } catch(err) {
-            expect(err.message).to.be.equal('Invalid transformationPosition parameter');
-        }
-    });
-});
\ No newline at end of file
diff --git a/test/setup.js b/test/setup.js
new file mode 100644
index 0000000..5decfdd
--- /dev/null
+++ b/test/setup.js
@@ -0,0 +1,12 @@
+// test-setup.js (loaded before your tests)
+global.FormData = require("formdata-node");
+global.Blob = require("web-file-polyfill").Blob
+global.File = require("web-file-polyfill").File
+global.ProgressEvent = class FakeProgressEvent {
+    constructor(type, init = {}) {
+        this.type = type;
+        this.lengthComputable = init.lengthComputable || false;
+        this.loaded = init.loaded || 0;
+        this.total = init.total || 0;
+    }
+};
diff --git a/test/upload.js b/test/upload.js
index 5f27bd4..a5c7004 100644
--- a/test/upload.js
+++ b/test/upload.js
@@ -1,13 +1,15 @@
 const chai = require("chai");
 const sinon = require("sinon");
-global.FormData = require("formdata-node");
-global.Blob = require("web-file-polyfill").Blob
-global.File = require("web-file-polyfill").File
 const expect = chai.expect;
-const initializationParams = require("./data").initializationParams
-import ImageKit from "../src/index";
+import 'regenerator-runtime/runtime';
+import {
+    ImageKitAbortError,
+    ImageKitInvalidRequestError,
+    ImageKitServerError,
+    ImageKitUploadNetworkError, upload
+} from "../src/index";
+
 var requests, server;
-import 'regenerator-runtime/runtime'
 
 const uploadSuccessResponseObj = {
     "fileId": "598821f949c0a938d57563bd",
@@ -29,8 +31,9 @@ const uploadSuccessResponseObj = {
 const securityParameters = {
     signature: "test_signature",
     expire: 123,
-    token: "test_token"
-}
+    token: "test_token",
+    publicKey: "test_public_key",
+};
 
 function successUploadResponse() {
     server.respondWith("POST", "https://upload.imagekit.io/api/v1/files/upload",
@@ -59,17 +62,13 @@ function errorUploadResponse(statusCode, obj) {
 }
 
 async function sleep(ms = 0) {
-    return new Promise((resolve, reject) => {
-        setTimeout(() => {
-            resolve();
-        }, ms);
+    return true;
+    return new Promise((resolve) => {
+        setTimeout(resolve, ms);
     });
 }
 
-describe("File upload", function () {
-
-    var imagekit = new ImageKit(initializationParams);
-
+describe("File upload", async function () {
     beforeEach(() => {
         global.XMLHttpRequest = sinon.useFakeXMLHttpRequest();
         requests = [];
@@ -78,130 +77,161 @@ describe("File upload", function () {
     });
 
     afterEach(() => {
-        // Like before we must clean up when tampering with globals.
         global.XMLHttpRequest.restore();
         server.restore();
     });
 
-    it('Invalid options', function () {
-        var callback = sinon.spy();
-
-        imagekit.upload(undefined, callback);
-        expect(server.requests.length).to.be.equal(0);
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, { help: "", message: "Invalid uploadOptions parameter" }, null);
+    it('Invalid options', async function () {
+        try {
+            await upload();
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Invalid options provided for upload");
+        }
     });
 
-    it('Missing fileName', function () {
+    it('Missing fileName', async function () {
         const fileOptions = {
             ...securityParameters,
             file: "https://ik.imagekit.io/remote-url.jpg"
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, { help: "", message: "Missing fileName parameter for upload" }, null);
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Missing fileName parameter for upload");
+        }
     });
 
-    it('Missing file', function () {
+    it('Missing file', async function () {
         const fileOptions = {
             ...securityParameters,
             fileName: "test_file_name",
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, { help: "", message: "Missing file parameter for upload" }, null);
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Missing file parameter for upload");
+        }
     });
-    
-    it('Missing token', function () {
+
+    it('Missing token', async function () {
         const fileOptions = {
             fileName: "test_file_name",
             file: "test_file",
             signature: 'test_signature',
-            expire: 123
+            expire: 123,
+            // Omit token
+            publicKey: 'test_public_key'
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, { message: "Missing token for upload. The SDK expects token, signature and expire for authentication.", help: "" }, null);
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Missing token for upload. The SDK expects token, signature and expire for authentication.");
+        }
     });
 
-    it('Missing signature', function () {
+    it('Missing signature', async function () {
         const fileOptions = {
             fileName: "test_file_name",
             file: "test_file",
             token: 'test_token',
-            expire: 123
+            expire: 123,
+            publicKey: 'test_public_key'
+            // Omit signature
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, { message: "Missing signature for upload. The SDK expects token, signature and expire for authentication.", help: "" }, null);
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Missing signature for upload. The SDK expects token, signature and expire for authentication.");
+        }
     });
 
-    it('Missing expire', function () {
+    it('Missing expire', async function () {
         const fileOptions = {
             fileName: "test_file_name",
             file: "test_file",
             token: 'test_token',
-            signature: 'test_signature'
+            signature: 'test_signature',
+            publicKey: 'test_public_key'
+            // Omit expire
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, { message: "Missing expire for upload. The SDK expects token, signature and expire for authentication.", help: "" }, null);
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Missing expire for upload. The SDK expects token, signature and expire for authentication.");
+        }
     });
 
-    it('Missing public key', function () {
+    it('Missing public key', async function () {
         const fileOptions = {
             fileName: "test_file_name",
-            file: "test_file"
+            file: "test_file",
+            token: 'test_token',
+            signature: 'test_signature',
+            expire: 123
+            // Omit publicKey
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback, {
-            publicKey: ""
-        });
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
-        sinon.assert.calledWith(callback, { message: "Missing public key for upload", help: "" }, null);
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Missing public key for upload");
+        }
     });
 
     it('Upload endpoint network error handling', async function () {
         const fileOptions = {
-            ...securityParameters,
             fileName: "test_file_name",
-            file: "test_file"
+            file: "test_file",
+            token: 'test_token',
+            signature: 'test_signature',
+            expire: 123,
+            publicKey: 'test_public_key'
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
-
         // Simulate network error on upload API
         server.requests[0].error();
         await sleep();
-        sinon.assert.calledWith(callback, { message: "Request to ImageKit upload endpoint failed due to network error", help: "" }, null);
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitUploadNetworkError).to.be.true;
+            expect(ex.message).to.be.equal("Request to ImageKit upload endpoint failed due to network error");
+        }
     });
 
     it('Boolean handling', async function () {
@@ -216,10 +246,7 @@ describe("File upload", function () {
             isPrivateFile: true
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -238,8 +265,8 @@ describe("File upload", function () {
         expect(arg.get('isPrivateFile')).to.be.equal('true');
         expect(arg.get('publicKey')).to.be.equal('test_public_key');
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('Tag array handling', async function () {
@@ -252,10 +279,7 @@ describe("File upload", function () {
             isPrivateFile: true
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -272,8 +296,8 @@ describe("File upload", function () {
         expect(arg.get('isPrivateFile')).to.be.equal('true');
         expect(arg.get('publicKey')).to.be.equal('test_public_key');
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('Missing useUniqueFileName', async function () {
@@ -285,10 +309,7 @@ describe("File upload", function () {
             isPrivateFile: true
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -307,8 +328,8 @@ describe("File upload", function () {
         expect(arg.get('customCoordinates')).to.be.equal(undefined);
         expect(arg.get('responseFields')).to.be.equal(undefined);
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('Missing isPrivateFile', async function () {
@@ -319,10 +340,7 @@ describe("File upload", function () {
             tags: ["test_tag1", "test_tag2"]
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -341,8 +359,8 @@ describe("File upload", function () {
         expect(arg.get('customCoordinates')).to.be.equal(undefined);
         expect(arg.get('responseFields')).to.be.equal(undefined);
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('With extensions parameter', async function () {
@@ -364,10 +382,7 @@ describe("File upload", function () {
             ],
             webhookUrl: "https://your-domain/?appId=some-id"
         };
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -387,10 +402,10 @@ describe("File upload", function () {
         expect(arg.get('isPrivateFile')).to.be.equal('true');
         expect(arg.get('publicKey')).to.be.equal('test_public_key');
         expect(arg.get('extensions')).to.be.equal(JSON.stringify(fileOptions.extensions));
-        expect(arg.get('webhookUrl')).to.be.equal('https://your-domain/?appId=some-id')
+        expect(arg.get('webhookUrl')).to.be.equal('https://your-domain/?appId=some-id');
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('Bare minimum request', async function () {
@@ -401,10 +416,7 @@ describe("File upload", function () {
             tags: undefined
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -423,29 +435,26 @@ describe("File upload", function () {
         expect(arg.get('customCoordinates')).to.be.equal(undefined);
         expect(arg.get('responseFields')).to.be.equal(undefined);
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('Bare minimum request: Blob', async function () {
-        const buffer = Buffer.from("test_buffer")
+        const buffer = Buffer.from("test_buffer");
         const fileOptions = {
             ...securityParameters,
             fileName: "test_file_name",
             file: buffer
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
         await sleep();
 
         var arg = server.requests[0].requestBody;
-
+        // It's a blob now, check size
         expect(arg.get('file').size).to.be.eq(buffer.length);
         expect(arg.get('fileName')).to.be.equal("test_file_name");
         expect(arg.get('token')).to.be.equal("test_token");
@@ -458,8 +467,8 @@ describe("File upload", function () {
         expect(arg.get('customCoordinates')).to.be.equal(undefined);
         expect(arg.get('responseFields')).to.be.equal(undefined);
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('Error during upload', async function () {
@@ -469,20 +478,22 @@ describe("File upload", function () {
             file: "test_file"
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         var errRes = {
             help: "For support kindly contact us at support@imagekit.io .",
             message: "Your account cannot be authenticated."
-        }
-        errorUploadResponse(500, errRes);
+        };
+        errorUploadResponse(401, errRes);
         await sleep();
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, errRes, null);
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Your account cannot be authenticated.");
+        }
     });
 
     it('Error during upload non 2xx with bad body', async function () {
@@ -492,10 +503,7 @@ describe("File upload", function () {
             file: "test_file"
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         server.respondWith("POST", "https://upload.imagekit.io/api/v1/files/upload",
@@ -507,9 +515,14 @@ describe("File upload", function () {
         );
         server.respond();
         await sleep();
-        expect(callback.calledOnce).to.be.true;
-        var error = callback.args[0][0];
-        expect(error instanceof SyntaxError).to.be.true;
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            // The response body is invalid JSON => SyntaxError
+            expect(ex instanceof ImageKitServerError).to.be.true;
+            expect(ex.message).to.be.equal("Server error occurred while uploading the file. This is rare and usually temporary.");
+        }
     });
 
     it('Error during upload 2xx with bad body', async function () {
@@ -519,10 +532,7 @@ describe("File upload", function () {
             file: "test_file"
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         server.respondWith("POST", "https://upload.imagekit.io/api/v1/files/upload",
@@ -534,9 +544,12 @@ describe("File upload", function () {
         );
         server.respond();
         await sleep();
-        expect(callback.calledOnce).to.be.true;
-        var error = callback.args[0][0];
-        expect(error instanceof SyntaxError).to.be.true;
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof SyntaxError).to.be.true;
+        }
     });
 
     it('Upload via URL', async function () {
@@ -546,10 +559,7 @@ describe("File upload", function () {
             file: "https://ik.imagekit.io/remote-url.jpg"
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -568,8 +578,8 @@ describe("File upload", function () {
         expect(arg.get('customCoordinates')).to.be.equal(undefined);
         expect(arg.get('responseFields')).to.be.equal(undefined);
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('Overriding public key', async function () {
@@ -581,9 +591,8 @@ describe("File upload", function () {
             file: "https://ik.imagekit.io/remote-url.jpg"
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback, {
+        const uploadPromise = upload({
+            ...fileOptions,
             publicKey: newPublicKey
         });
 
@@ -607,8 +616,8 @@ describe("File upload", function () {
         expect(arg.get('extensions')).to.be.equal(undefined);
         expect(arg.get('customMetadata')).to.be.equal(undefined);
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('With overwrite parameters', async function () {
@@ -622,21 +631,14 @@ describe("File upload", function () {
             useUniqueFileName: false,
             isPrivateFile: true,
             extensions: [
-                {
-                    name: "aws-auto-tagging",
-                    minConfidence: 80,
-                    maxTags: 10
-                }
+                { name: "aws-auto-tagging", minConfidence: 80, maxTags: 10 }
             ],
             overwriteFile: false,
             overwriteAITags: false,
             overwriteTags: false,
             overwriteCustomMetadata: false
         };
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -661,8 +663,8 @@ describe("File upload", function () {
         expect(arg.get('overwriteTags')).to.be.equal('false');
         expect(arg.get('overwriteCustomMetadata')).to.be.equal('false');
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('With customMetadata', async function () {
@@ -676,11 +678,7 @@ describe("File upload", function () {
             useUniqueFileName: false,
             isPrivateFile: true,
             extensions: [
-                {
-                    name: "aws-auto-tagging",
-                    minConfidence: 80,
-                    maxTags: 10
-                }
+                { name: "aws-auto-tagging", minConfidence: 80, maxTags: 10 }
             ],
             overwriteFile: false,
             overwriteAITags: false,
@@ -691,10 +689,7 @@ describe("File upload", function () {
                 color: "red"
             },
         };
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -720,8 +715,8 @@ describe("File upload", function () {
         expect(arg.get('overwriteCustomMetadata')).to.be.equal('false');
         expect(arg.get('customMetadata')).to.be.equal(JSON.stringify(fileOptions.customMetadata));
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('Array type fields', async function () {
@@ -735,11 +730,7 @@ describe("File upload", function () {
             useUniqueFileName: false,
             isPrivateFile: true,
             extensions: [
-                {
-                    name: "aws-auto-tagging",
-                    minConfidence: 80,
-                    maxTags: 10
-                }
+                { name: "aws-auto-tagging", minConfidence: 80, maxTags: 10 }
             ],
             overwriteFile: false,
             overwriteAITags: false,
@@ -750,10 +741,7 @@ describe("File upload", function () {
                 color: "red"
             },
         };
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -779,8 +767,8 @@ describe("File upload", function () {
         expect(arg.get('overwriteCustomMetadata')).to.be.equal('false');
         expect(arg.get('customMetadata')).to.be.equal(JSON.stringify(fileOptions.customMetadata));
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('check custom XHR object is used', async function () {
@@ -797,16 +785,11 @@ describe("File upload", function () {
             useUniqueFileName: false,
             isPrivateFile: true,
             extensions: [
-                {
-                    name: "aws-auto-tagging",
-                    minConfidence: 80,
-                    maxTags: 10
-                }
+                { name: "aws-auto-tagging", minConfidence: 80, maxTags: 10 }
             ],
             xhr
         };
-        var callback = sinon.spy();
-        imagekit.upload(fileOptions, callback);
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         expect(server.requests[0]).to.be.equal(xhr);
         expect(server.requests[0].onprogress.toString()).to.be.equal(fun.toString());
@@ -829,8 +812,8 @@ describe("File upload", function () {
         expect(arg.get('publicKey')).to.be.equal('test_public_key');
         expect(arg.get('extensions')).to.be.equal(JSON.stringify(fileOptions.extensions));
 
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('Upload using promise - success', async function () {
@@ -844,15 +827,11 @@ describe("File upload", function () {
             useUniqueFileName: false,
             isPrivateFile: true,
             extensions: [
-                {
-                    name: "aws-auto-tagging",
-                    minConfidence: 80,
-                    maxTags: 10
-                }
+                { name: "aws-auto-tagging", minConfidence: 80, maxTags: 10 }
             ]
         };
 
-        var uploadPromise = imagekit.upload(fileOptions);
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
 
         await sleep();
@@ -873,15 +852,15 @@ describe("File upload", function () {
         expect(arg.get('isPrivateFile')).to.be.equal('true');
         expect(arg.get('publicKey')).to.be.equal('test_public_key');
         expect(arg.get('extensions')).to.be.equal(JSON.stringify(fileOptions.extensions));
-        var response = await uploadPromise;
+        const response = await uploadPromise;
         expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
-    it('Upload using promise - error', async function () {
+    it('Server 5xx error with proper json and message', async function () {
         var errRes = {
             help: "For support kindly contact us at support@imagekit.io .",
-            message: "Your account cannot be authenticated."
-        }
+            message: "Something went wrong"
+        };
         const fileOptions = {
             ...securityParameters,
             fileName: "test_file_name",
@@ -892,22 +871,20 @@ describe("File upload", function () {
             useUniqueFileName: false,
             isPrivateFile: true,
             extensions: [
-                {
-                    name: "aws-auto-tagging",
-                    minConfidence: 80,
-                    maxTags: 10
-                }
+                { name: "aws-auto-tagging", minConfidence: 80, maxTags: 10 }
             ]
         };
 
         try {
-            var uploadPromise = imagekit.upload(fileOptions);
+            const uploadPromise = upload(fileOptions);
             await sleep();
             errorUploadResponse(500, errRes);
             await sleep();
-            var response = await uploadPromise;
+            await uploadPromise;
+            throw new Error('Should have thrown error');
         } catch (ex) {
-            expect(ex).to.be.deep.equal(errRes);
+            expect(ex instanceof ImageKitServerError).to.be.true;
+            expect(ex.message).to.be.equal("Something went wrong");
         }
     });
 
@@ -925,19 +902,14 @@ describe("File upload", function () {
             useUniqueFileName: false,
             isPrivateFile: true,
             extensions: [
-                {
-                    name: "aws-auto-tagging",
-                    minConfidence: 80,
-                    maxTags: 10
-                }
+                { name: "aws-auto-tagging", minConfidence: 80, maxTags: 10 }
             ],
             xhr
         };
-        var uploadPromise = imagekit.upload(fileOptions);
+        const uploadPromise = upload(fileOptions);
 
         expect(server.requests.length).to.be.equal(1);
 
-
         await sleep();
         successUploadResponse();
         await sleep();
@@ -960,13 +932,13 @@ describe("File upload", function () {
         expect(arg.get('publicKey')).to.be.equal('test_public_key');
         expect(arg.get('extensions')).to.be.equal(JSON.stringify(fileOptions.extensions));
 
-        var response = await uploadPromise;
+        const response = await uploadPromise;
         expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it('$ResponseMetadata assertions using promise', async function () {
-        var dummyResonseHeaders = {
-            "Content-Type": "application/json",
+        var dummyResponseHeaders = {
+            "content-type": "application/json",
             "x-request-id": "sdfsdfsdfdsf"
         };
         const fileOptions = {
@@ -987,7 +959,7 @@ describe("File upload", function () {
             ]
         };
 
-        var uploadPromise = imagekit.upload(fileOptions)
+        var uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
 
         await sleep();
@@ -995,53 +967,17 @@ describe("File upload", function () {
         server.respondWith("POST", "https://upload.imagekit.io/api/v1/files/upload",
             [
                 200,
-                dummyResonseHeaders,
-                JSON.stringify(uploadSuccessResponseObj)
-            ]
-        );
-        server.respond();
-        await sleep();
-
-        var response = await uploadPromise;
-        expect(response.$ResponseMetadata.headers).to.be.deep.equal(dummyResonseHeaders);
-        expect(response.$ResponseMetadata.statusCode).to.be.deep.equal(200);
-    });
-
-    it('$ResponseMetadata assertions using callback', async function () {
-        var dummyResonseHeaders = {
-            "Content-Type": "application/json",
-            "x-request-id": "sdfsdfsdfdsf"
-        };
-        const fileOptions = {
-            ...securityParameters,
-            fileName: "test_file_name",
-            file: "test_file"
-        };
-        var callback = sinon.spy();
-        imagekit.upload(fileOptions, callback);
-
-        expect(server.requests.length).to.be.equal(1);
-
-        await sleep();
-        server.respondWith("POST", "https://upload.imagekit.io/api/v1/files/upload",
-            [
-                200,
-                dummyResonseHeaders,
+                dummyResponseHeaders,
                 JSON.stringify(uploadSuccessResponseObj)
             ]
         );
         server.respond();
         await sleep();
 
-        expect(callback.calledOnce).to.be.true;
-
-        var callBackArguments = callback.args[0];
-        expect(callBackArguments.length).to.be.eq(2);
-        var callbackResult = callBackArguments[1];
-
-        expect(callbackResult).to.be.deep.equal(uploadSuccessResponseObj);
-        expect(callbackResult.$ResponseMetadata.headers).to.be.deep.equal(dummyResonseHeaders);
-        expect(callbackResult.$ResponseMetadata.statusCode).to.be.deep.equal(200);
+        const response = await uploadPromise;
+        expect(response.$ResponseMetadata.headers).to.deep.equal(dummyResponseHeaders);
+        expect(response.$ResponseMetadata.statusCode).to.equal(200);
+        expect(response.$ResponseMetadata.requestId).to.equal("sdfsdfsdfdsf");
     });
 
     it('Undefined fields should not be sent', async function () {
@@ -1063,10 +999,7 @@ describe("File upload", function () {
             customMetadata: undefined
         };
 
-        var callback = sinon.spy();
-
-        imagekit.upload(fileOptions, callback);
-
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
@@ -1088,246 +1021,243 @@ describe("File upload", function () {
         expect(arg.get('overwriteTags')).to.be.equal(undefined);
         expect(arg.get('overwriteCustomMetadata')).to.be.equal(undefined);
         expect(arg.get('customMetadata')).to.be.equal(undefined);
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it("With pre and post transformation", async function () {
-      const fileOptions = {
-        ...securityParameters,
-        fileName: "test_file_name",
-        file: "test_file",
-        responseFields: "tags, customCoordinates, isPrivateFile, metadata",
-        useUniqueFileName: false,
-        transformation: { pre: "w-100", post: [{ type: "transformation", value: "w-100" }] },
-      };
-      var callback = sinon.spy();
-
-      imagekit.upload(fileOptions, callback);
-
-      expect(server.requests.length).to.be.equal(1);
-      await sleep();
-      successUploadResponse();
-      await sleep();
-
-      var arg = server.requests[0].requestBody;
-
-      expect(arg.get("file")).to.be.equal("test_file");
-      expect(arg.get("fileName")).to.be.equal("test_file_name");
-      expect(arg.get("responseFields")).to.be.equal("tags, customCoordinates, isPrivateFile, metadata");
-      expect(arg.get("useUniqueFileName")).to.be.equal("false");
-      expect(arg.get("publicKey")).to.be.equal("test_public_key");
-      expect(arg.get("transformation")).to.be.equal(JSON.stringify(fileOptions.transformation));
-
-      expect(callback.calledOnce).to.be.true;
-      sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            responseFields: "tags, customCoordinates, isPrivateFile, metadata",
+            useUniqueFileName: false,
+            transformation: { pre: "w-100", post: [{ type: "transformation", value: "w-100" }] },
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        await sleep();
+        successUploadResponse();
+        await sleep();
+
+        var arg = server.requests[0].requestBody;
+
+        expect(arg.get("file")).to.be.equal("test_file");
+        expect(arg.get("fileName")).to.be.equal("test_file_name");
+        expect(arg.get("responseFields")).to.be.equal("tags, customCoordinates, isPrivateFile, metadata");
+        expect(arg.get("useUniqueFileName")).to.be.equal("false");
+        expect(arg.get("publicKey")).to.be.equal("test_public_key");
+        expect(arg.get("transformation")).to.be.equal(JSON.stringify(fileOptions.transformation));
+
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it("With pre transformation", async function () {
-      const fileOptions = {
-        ...securityParameters,
-        fileName: "test_file_name",
-        file: "test_file",
-        responseFields: "tags, customCoordinates, isPrivateFile, metadata",
-        useUniqueFileName: false,
-        transformation: { pre: "w-100" },
-      };
-      var callback = sinon.spy();
-
-      imagekit.upload(fileOptions, callback);
-
-      expect(server.requests.length).to.be.equal(1);
-      await sleep();
-      successUploadResponse();
-      await sleep();
-
-      var arg = server.requests[0].requestBody;
-
-      expect(arg.get("file")).to.be.equal("test_file");
-      expect(arg.get("fileName")).to.be.equal("test_file_name");
-      expect(arg.get("responseFields")).to.be.equal("tags, customCoordinates, isPrivateFile, metadata");
-      expect(arg.get("useUniqueFileName")).to.be.equal("false");
-      expect(arg.get("publicKey")).to.be.equal("test_public_key");
-      expect(arg.get("transformation")).to.be.equal(JSON.stringify(fileOptions.transformation));
-
-      expect(callback.calledOnce).to.be.true;
-      sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            responseFields: "tags, customCoordinates, isPrivateFile, metadata",
+            useUniqueFileName: false,
+            transformation: { pre: "w-100" },
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        await sleep();
+        successUploadResponse();
+        await sleep();
+
+        var arg = server.requests[0].requestBody;
+
+        expect(arg.get("file")).to.be.equal("test_file");
+        expect(arg.get("fileName")).to.be.equal("test_file_name");
+        expect(arg.get("responseFields")).to.be.equal("tags, customCoordinates, isPrivateFile, metadata");
+        expect(arg.get("useUniqueFileName")).to.be.equal("false");
+        expect(arg.get("publicKey")).to.be.equal("test_public_key");
+        expect(arg.get("transformation")).to.be.equal(JSON.stringify(fileOptions.transformation));
+
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
     it("With post transformation", async function () {
-      const fileOptions = {
-        ...securityParameters,
-        fileName: "test_file_name",
-        file: "test_file",
-        responseFields: "tags, customCoordinates, isPrivateFile, metadata",
-        useUniqueFileName: false,
-        transformation: { post: [{ type: "transformation", value: "w-100" }] },
-      };
-      var callback = sinon.spy();
-
-      imagekit.upload(fileOptions, callback);
-
-      expect(server.requests.length).to.be.equal(1);
-      await sleep();
-      successUploadResponse();
-      await sleep();
-
-      var arg = server.requests[0].requestBody;
-
-      expect(arg.get("file")).to.be.equal("test_file");
-      expect(arg.get("fileName")).to.be.equal("test_file_name");
-      expect(arg.get("responseFields")).to.be.equal("tags, customCoordinates, isPrivateFile, metadata");
-      expect(arg.get("useUniqueFileName")).to.be.equal("false");
-      expect(arg.get("publicKey")).to.be.equal("test_public_key");
-      expect(arg.get("transformation")).to.be.equal(JSON.stringify(fileOptions.transformation));
-
-      expect(callback.calledOnce).to.be.true;
-      sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            responseFields: "tags, customCoordinates, isPrivateFile, metadata",
+            useUniqueFileName: false,
+            transformation: { post: [{ type: "transformation", value: "w-100" }] },
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        await sleep();
+        successUploadResponse();
+        await sleep();
+
+        var arg = server.requests[0].requestBody;
+
+        expect(arg.get("file")).to.be.equal("test_file");
+        expect(arg.get("fileName")).to.be.equal("test_file_name");
+        expect(arg.get("responseFields")).to.be.equal("tags, customCoordinates, isPrivateFile, metadata");
+        expect(arg.get("useUniqueFileName")).to.be.equal("false");
+        expect(arg.get("publicKey")).to.be.equal("test_public_key");
+        expect(arg.get("transformation")).to.be.equal(JSON.stringify(fileOptions.transformation));
+
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
     });
 
-    it("Should return error for an invalid transformation", async function () {
-      const fileOptions = {
-        ...securityParameters,
-        fileName: "test_file_name",
-        file: "test_file",
-        responseFields: "tags, customCoordinates, isPrivateFile, metadata",
-        useUniqueFileName: false,
-        transformation: {},
-      };
-      var callback = sinon.spy();
-
-      imagekit.upload(fileOptions, callback);
-
-      expect(server.requests.length).to.be.equal(1);
-      await sleep();
-      var errRes = {
-        help: "",
-        message: "Invalid transformation parameter. Please include at least pre, post, or both.",
-      };
-      errorUploadResponse(500, errRes);
-      await sleep();
-      expect(callback.calledOnce).to.be.true;
-      sinon.assert.calledWith(callback, errRes, null);
+    it("Server 5xx without message", async function () {
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            responseFields: "tags, customCoordinates, isPrivateFile, metadata",
+            useUniqueFileName: false
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        await sleep();
+        var errRes = {
+            help: ""
+        };
+        errorUploadResponse(500, errRes);
+        await sleep();
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitServerError).to.be.true;
+            expect(ex.message).to.be.equal("Server error occurred while uploading the file. This is rare and usually temporary.");
+        }
     });
 
     it("Should return error for an invalid pre transformation", async function () {
-      const fileOptions = {
-        ...securityParameters,
-        fileName: "test_file_name",
-        file: "test_file",
-        responseFields: "tags, customCoordinates, isPrivateFile, metadata",
-        useUniqueFileName: false,
-        transformation: { pre: "" },
-      };
-      var callback = sinon.spy();
-
-      imagekit.upload(fileOptions, callback);
-
-      expect(server.requests.length).to.be.equal(1);
-      await sleep();
-      var errRes = {
-        help: "",
-        message: "Invalid pre transformation parameter.",
-      };
-      errorUploadResponse(500, errRes);
-      await sleep();
-      expect(callback.calledOnce).to.be.true;
-      sinon.assert.calledWith(callback, errRes, null);
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            responseFields: "tags, customCoordinates, isPrivateFile, metadata",
+            useUniqueFileName: false,
+            transformation: { pre: "" },
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        await sleep();
+        var errRes = {
+            help: "",
+            message: "Invalid pre transformation parameter.",
+        };
+        errorUploadResponse(500, errRes);
+        await sleep();
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Invalid pre transformation parameter.");
+        }
     });
 
     it("Should return error for an invalid post transformation of type abs", async function () {
-      const fileOptions = {
-        ...securityParameters,
-        fileName: "test_file_name",
-        file: "test_file",
-        responseFields: "tags, customCoordinates, isPrivateFile, metadata",
-        useUniqueFileName: false,
-        transformation: { post: [{ type: "abs", value: "" }] },
-      };
-      var callback = sinon.spy();
-
-      imagekit.upload(fileOptions, callback);
-
-      expect(server.requests.length).to.be.equal(1);
-      await sleep();
-      var errRes = {
-        help: "",
-        message: "Invalid post transformation parameter.",
-      };
-      errorUploadResponse(500, errRes);
-      await sleep();
-      expect(callback.calledOnce).to.be.true;
-      sinon.assert.calledWith(callback, errRes, null);
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            responseFields: "tags, customCoordinates, isPrivateFile, metadata",
+            useUniqueFileName: false,
+            transformation: { post: [{ type: "abs", value: "" }] },
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        await sleep();
+        var errRes = {
+            help: "",
+            message: "Invalid post transformation parameter.",
+        };
+        errorUploadResponse(500, errRes);
+        await sleep();
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Invalid post transformation parameter.");
+        }
     });
 
     it("Should return error for an invalid post transformation of type transformation", async function () {
-      const fileOptions = {
-        ...securityParameters,
-        fileName: "test_file_name",
-        file: "test_file",
-        responseFields: "tags, customCoordinates, isPrivateFile, metadata",
-        useUniqueFileName: false,
-        transformation: { post: [{ type: "transformation", value: "" }] },
-      };
-      var callback = sinon.spy();
-
-      imagekit.upload(fileOptions, callback);
-
-      expect(server.requests.length).to.be.equal(1);
-      await sleep();
-      var errRes = {
-        help: "",
-        message: "Invalid post transformation parameter.",
-      };
-      errorUploadResponse(500, errRes);
-      await sleep();
-      expect(callback.calledOnce).to.be.true;
-      sinon.assert.calledWith(callback, errRes, null);
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            responseFields: "tags, customCoordinates, isPrivateFile, metadata",
+            useUniqueFileName: false,
+            transformation: { post: [{ type: "transformation", value: "" }] },
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        await sleep();
+        var errRes = {
+            help: "",
+            message: "Invalid post transformation parameter.",
+        };
+        errorUploadResponse(500, errRes);
+        await sleep();
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Invalid post transformation parameter.");
+        }
     });
 
     it("Should return error for an invalid post transformation if it's not an array", async function () {
-      const fileOptions = {
-        ...securityParameters,
-        fileName: "test_file_name",
-        file: "test_file",
-        responseFields: "tags, customCoordinates, isPrivateFile, metadata",
-        useUniqueFileName: false,
-        transformation: { post: {} },
-      };
-      var callback = sinon.spy();
-
-      imagekit.upload(fileOptions, callback);
-
-      expect(server.requests.length).to.be.equal(1);
-      await sleep();
-      var errRes = {
-        help: "",
-        message: "Invalid post transformation parameter.",
-      };
-      errorUploadResponse(500, errRes);
-      await sleep();
-      expect(callback.calledOnce).to.be.true;
-      sinon.assert.calledWith(callback, errRes, null);
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            responseFields: "tags, customCoordinates, isPrivateFile, metadata",
+            useUniqueFileName: false,
+            transformation: { post: {} },
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        await sleep();
+        var errRes = {
+            help: "",
+            message: "Invalid post transformation parameter.",
+        };
+        errorUploadResponse(500, errRes);
+        await sleep();
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Invalid post transformation parameter.");
+        }
     });
 
     it("With checks option", async function () {
         const fileOptions = {
-          ...securityParameters,
-          fileName: "test_file_name",
-          file: "test_file",
-          responseFields: "tags, customCoordinates, isPrivateFile, metadata",
-          useUniqueFileName: false,
-          checks: "'request.folder' : '/'",
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            responseFields: "tags, customCoordinates, isPrivateFile, metadata",
+            useUniqueFileName: false,
+            checks: "'request.folder' : '/'",
         };
-        var callback = sinon.spy();
-  
-        imagekit.upload(fileOptions, callback);
-  
+        const uploadPromise = upload(fileOptions);
         expect(server.requests.length).to.be.equal(1);
         await sleep();
         successUploadResponse();
         await sleep();
-  
+
         var arg = server.requests[0].requestBody;
         expect(arg.get("file")).to.be.equal("test_file");
         expect(arg.get("fileName")).to.be.equal("test_file_name");
@@ -1335,8 +1265,130 @@ describe("File upload", function () {
         expect(arg.get("useUniqueFileName")).to.be.equal("false");
         expect(arg.get("publicKey")).to.be.equal("test_public_key");
         expect(arg.get('checks')).to.be.equal("'request.folder' : '/'");
-  
-        expect(callback.calledOnce).to.be.true;
-        sinon.assert.calledWith(callback, null, uploadSuccessResponseObj);
+
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
+    });
+
+    it('onProgress callback is triggered during upload', async function () {
+        const progressSpy = sinon.spy();
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            onProgress: progressSpy
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        server.requests[0].uploadProgress({ lengthComputable: true, loaded: 50, total: 100 });
+
+        await sleep();
+        expect(progressSpy.calledOnce).to.be.true;
+        successUploadResponse();
+        await sleep();
+        expect(progressSpy.calledTwice).to.be.true; // final progress
+        const response = await uploadPromise;
+        expect(response).to.be.deep.equal(uploadSuccessResponseObj);
+    });
+
+    it('Abort signal aborts the upload', async function () {
+        const abortController = new AbortController();
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            abortSignal: abortController.signal
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        abortController.abort();
+        await sleep();
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitAbortError).to.be.true;
+            expect(ex.reason.name).to.be.equal("AbortError");
+        }
+    });
+
+    it('Abort signal aborts the upload with reason', async function () {
+        const abortController = new AbortController();
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            abortSignal: abortController.signal
+        };
+        const uploadPromise = upload(fileOptions);
+        expect(server.requests.length).to.be.equal(1);
+        abortController.abort("abort reason");
+        await sleep();
+        try {
+            await uploadPromise;
+            throw new Error('Should have thrown error');
+        } catch (ex) {
+            expect(ex instanceof ImageKitAbortError).to.be.true;
+            expect(ex.reason).to.be.equal("abort reason");
+        }
+    });
+
+    it("Already aborted signal should abort upload immediately", async function () {
+        const abortController = new AbortController();
+        // Abort the signal before calling upload
+        abortController.abort();
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            abortSignal: abortController.signal
+        };
+        try {
+            await upload(fileOptions);
+            throw new Error("Should have thrown error");
+        } catch (ex) {
+            expect(ex instanceof ImageKitAbortError).to.be.true;
+            expect(ex.reason && ex.reason.name).to.be.equal("AbortError");
+        }
+    });
+
+    it("Error during upload 4xx with invalid JSON response", async function () {
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file"
+        };
+        const uploadPromise = upload(fileOptions);
+        // errorUploadResponse(400, `{sd`);
+        server.respondWith("POST", "https://upload.imagekit.io/api/v1/files/upload",
+            [
+                400,
+                { "Content-Type": "application/json" },
+                "sdf"
+            ]
+        );
+        server.respond();
+        try {
+            await uploadPromise;
+            throw new Error("Should have thrown error");
+        } catch (ex) {
+            expect(ex).to.be.instanceOf(SyntaxError);
+        }
+    });
+
+    it("Should return error for an invalid transformation object in upload", async function () {
+        const fileOptions = {
+            ...securityParameters,
+            fileName: "test_file_name",
+            file: "test_file",
+            transformation: 123
+        };
+        try {
+            await upload(fileOptions);
+            throw new Error("Should have thrown error");
+        } catch (ex) {
+            expect(ex instanceof ImageKitInvalidRequestError).to.be.true;
+            expect(ex.message).to.be.equal("Invalid transformation parameter. Please include at least pre, post, or both.");
+        }
     });
 });
diff --git a/test/url-generation/basic.js b/test/url-generation/basic.js
index cb81ef2..739958c 100644
--- a/test/url-generation/basic.js
+++ b/test/url-generation/basic.js
@@ -1,36 +1,51 @@
 const chai = require("chai");
-const pkg = require("../../package.json");
-global.FormData = require('formdata-node');
 const expect = chai.expect;
-const initializationParams = require("../data").initializationParams
-import ImageKit from "../../src/index";
+import { buildSrc } from "../../src/index";
 
 describe("URL generation", function () {
+    it('should return an empty string when src is not provided', function () {
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query"
+        });
 
-    var imagekit = new ImageKit(initializationParams);
+        expect(url).equal("");
+    });
 
-    it('should return an empty string when neither path nor src is provided', function () {
-        const url = imagekit.url({});
+    it('should return an empty string when src is /', function () {
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/"
+        });
 
-        expect(url).equal("");
+        expect(url).equal("https://ik.imagekit.io/test_url_endpoint/");
     });
 
-    it('should return an empty string for an invalid src URL', function () {
-        const url = imagekit.url({ src: "/" });
+    it('should return an empty string when src is invalid', function () {
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "https://"
+        });
 
         expect(url).equal("");
     });
 
-    it('should generate a valid URL when a path is provided without transformation', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg"
+    it('should generate a valid URL when src is provided without transformation', function () {
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg"
         });
 
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg`);
     });
 
     it('should generate a valid URL when a src is provided without transformation', function () {
-        const url = imagekit.url({
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
             src: "https://ik.imagekit.io/test_url_endpoint/test_path_alt.jpg"
         });
 
@@ -38,951 +53,1235 @@ describe("URL generation", function () {
     });
 
     it('should generate a valid URL when undefined transformation parameters are provided with path', function () {
-        const url = imagekit.url({
-            path: "/test_path_alt.jpg",
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/test_path_alt.jpg",
             transformation: undefined,
-            transformationPosition: undefined,
-            src: undefined,
+            transformationPosition: "query"
         });
 
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path_alt.jpg`);
     });
 
     it("By default transformationPosition should be query", function () {
-        var imagekitNew = new ImageKit({
-            publicKey: "test_public_key",
+        const url = buildSrc({
             urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
-        });
-        const url = imagekitNew.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }, {
-                rotation: 90
-            }]
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                },
+                {
+                    rotation: 90
+                }
+            ]
         });
         expect(url).equal("https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400:rt-90");
     });
 
     it('should generate the URL without sdk version', function () {
-        const ik = new ImageKit(initializationParams)
-
-        const url = ik.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }]
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                }
+            ],
+            transformationPosition: "path"
         });
 
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300,w-400/test_path.jpg`);
     });
 
-    it('should generate the correct URL with a valid path and transformation', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }]
+    it('should generate the correct URL with a valid src and transformation', function () {
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                }
+            ]
         });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300,w-400/test_path.jpg`);
+        // Now transformed URL goes into query since transformationPosition is "query".
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400`);
     });
 
     it('should generate the correct URL when the provided path contains multiple leading slashes', function () {
-        const url = imagekit.url({
-            path: "///test_path.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }]
-        })
-
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300,w-400/test_path.jpg`);
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "///test_path.jpg",
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                }
+            ]
+        });
 
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400`);
     });
 
     it('should generate the correct URL when the urlEndpoint is overridden', function () {
-        const url = imagekit.url({
+        const url = buildSrc({
+            // We do not override urlEndpoint here
             urlEndpoint: "https://ik.imagekit.io/test_url_endpoint_alt",
-            path: "/test_path.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }]
-        })
-
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint_alt/tr:h-300,w-400/test_path.jpg`);
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                }
+            ]
+        });
 
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint_alt/test_path.jpg?tr=h-300,w-400`);
     });
 
-    it('should generate the correct URL with transformationPosition as query parameter when path is provided', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
+    it('should generate the correct URL with transformationPosition as query parameter when src is provided', function () {
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/test_path.jpg",
             transformationPosition: "query",
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }]
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                }
+            ]
         });
 
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400`);
     });
 
     it('should generate the correct URL with a valid src parameter and transformation', function () {
-        const url = imagekit.url({
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
             src: "https://ik.imagekit.io/test_url_endpoint/test_path_alt.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }]
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                }
+            ]
         });
 
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path_alt.jpg?tr=h-300,w-400`);
     });
 
     it('should generate the correct URL with transformationPosition as query parameter when src is provided', function () {
-        const url = imagekit.url({
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
             src: "https://ik.imagekit.io/test_url_endpoint/test_path_alt.jpg",
             transformationPosition: "query",
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }]
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                }
+            ]
         });
 
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path_alt.jpg?tr=h-300,w-400`);
     });
 
     it('should merge query parameters correctly in the generated URL', function () {
-        const url = imagekit.url({
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
             src: "https://ik.imagekit.io/test_url_endpoint/test_path_alt.jpg?t1=v1",
             queryParameters: { t2: "v2", t3: "v3" },
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }]
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                }
+            ]
         });
 
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path_alt.jpg?t1=v1&t2=v2&t3=v3&tr=h-300,w-400`);
     });
 
-
     it('should generate the correct URL with chained transformations', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }, {
-                "rt": "90"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                },
+                {
+                    rt: "90"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300,w-400:rt-90/test_path.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400:rt-90`);
     });
 
-
     it('should generate the correct URL with chained transformations including a new undocumented transformation parameter', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400"
-            }, {
-                "rndm_trnsf": "abcd"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: "300",
+                    width: "400"
+                },
+                {
+                    rndm_trnsf: "abcd"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300,w-400:rndm_trnsf-abcd/test_path.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400:rndm_trnsf-abcd`);
     });
 
     it('should generate the correct URL when overlay image transformation is provided', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400",
-                "raw": "l-image,i-overlay.jpg,w-100,b-10_CDDC39,l-end"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: "300",
+                    width: "400",
+                    raw: "l-image,i-overlay.jpg,w-100,b-10_CDDC39,l-end"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300,w-400,l-image,i-overlay.jpg,w-100,b-10_CDDC39,l-end/test_path.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400,l-image,i-overlay.jpg,w-100,b-10_CDDC39,l-end`);
     });
 
     it('should generate the correct URL when overlay image transformation contains a slash in the overlay path', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400",
-                "raw": "l-image,i-/path/to/overlay.jpg,w-100,b-10_CDDC39,l-end"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: "300",
+                    width: "400",
+                    raw: "l-image,i-/path/to/overlay.jpg,w-100,b-10_CDDC39,l-end"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300,w-400,l-image,i-/path/to/overlay.jpg,w-100,b-10_CDDC39,l-end/test_path.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400,l-image,i-/path/to/overlay.jpg,w-100,b-10_CDDC39,l-end`);
     });
 
     it('should generate the correct URL when border transformation is applied', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                "height": "300",
-                "width": "400",
-                border: "20_FF0000"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: "300",
+                    width: "400",
+                    border: "20_FF0000"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300,w-400,b-20_FF0000/test_path.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400,b-20_FF0000`);
     });
 
     it('should generate the correct URL when transformation has empty key and value', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                "": ""
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    "": ""
+                }
+            ]
+        });
 
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg`);
     });
 
-    /**
-     * Provided to provide support to a new transform without sdk update
-     */
     it('should generate the correct URL when an undefined transform is provided', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                "undefined-transform": "true"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    "undefined-transform": "true"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:undefined-transform-true/test_path.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=undefined-transform-true`);
     });
 
     it('should generate the correct URL when transformation key has an empty value', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                defaultImage: ""
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    defaultImage: ""
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:di-/test_path.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=di-`);
     });
 
     it('should generate the correct URL when transformation key has \'-\' as its value', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                contrastStretch: "-"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    contrastStretch: "-"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-contrast/test_path.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=e-contrast`);
     });
 
     it('should skip transformation parameters that are undefined or null', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                defaultImage: "/test_path.jpg",
-                quality: undefined,
-                contrastStretch: null
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    defaultImage: "/test_path.jpg",
+                    quality: undefined,
+                    contrastStretch: null
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:di-test_path.jpg/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=di-test_path.jpg`);
     });
 
     it('should skip transformation parameters that are false', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                defaultImage: "/test_path.jpg",
-                contrastStretch: false
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    defaultImage: "/test_path.jpg",
+                    contrastStretch: false
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:di-test_path.jpg/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=di-test_path.jpg`);
     });
 
     it('should include only the key when transformation value is an empty string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                defaultImage: "/test_path.jpg",
-                shadow: ""
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    defaultImage: "/test_path.jpg",
+                    shadow: ""
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:di-test_path.jpg,e-shadow/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=di-test_path.jpg,e-shadow`);
     });
 
     it('should include both key and value when transformation parameter value is provided', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                defaultImage: "/test_path.jpg",
-                shadow: "bl-15_st-40_x-10_y-N5"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    defaultImage: "/test_path.jpg",
+                    shadow: "bl-15_st-40_x-10_y-N5"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:di-test_path.jpg,e-shadow-bl-15_st-40_x-10_y-N5/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=di-test_path.jpg,e-shadow-bl-15_st-40_x-10_y-N5`);
     });
 
     it('should generate the correct URL when trim transformation is set to true as a boolean', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                defaultImage: "/test_path.jpg",
-                trim: true
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    defaultImage: "/test_path.jpg",
+                    trim: true
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:di-test_path.jpg,t-true/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=di-test_path.jpg,t-true`);
     });
 
     it('should generate the correct URL when trim transformation is set to true as a string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                defaultImage: "/test_path.jpg",
-                trim: "true"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    defaultImage: "/test_path.jpg",
+                    trim: "true"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:di-test_path.jpg,t-true/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=di-test_path.jpg,t-true`);
     });
 
     it('should generate the correct URL for AI background removal when set to true', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aiRemoveBackground: true
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aiRemoveBackground: true
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-bgremove/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-bgremove`);
     });
 
     it('should generate the correct URL for AI background removal when \'true\' is provided as a string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aiRemoveBackground: "true"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aiRemoveBackground: "true"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-bgremove/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-bgremove`);
     });
 
     it('should not apply AI background removal when value is not true', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aiRemoveBackground: "false"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aiRemoveBackground: "false"
+                }
+            ]
+        });
 
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg`);
     });
 
     it('should generate the correct URL for external AI background removal when set to true', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aiRemoveBackgroundExternal: true
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aiRemoveBackgroundExternal: true
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-removedotbg/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-removedotbg`);
     });
 
     it('should generate the correct URL for external AI background removal when \'true\' is provided as a string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aiRemoveBackgroundExternal: "true"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aiRemoveBackgroundExternal: "true"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-removedotbg/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-removedotbg`);
     });
 
     it('should not apply external AI background removal when value is not true', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aiRemoveBackgroundExternal: "false"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aiRemoveBackgroundExternal: "false"
+                }
+            ]
+        });
 
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg`);
     });
 
     it('should generate the correct URL when gradient transformation is provided as a string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                gradient: "ld-top_from-green_to-00FF0010_sp-1"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    gradient: "ld-top_from-green_to-00FF0010_sp-1"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-gradient-ld-top_from-green_to-00FF0010_sp-1/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-gradient-ld-top_from-green_to-00FF0010_sp-1`);
     });
 
     it('should generate the correct URL when gradient transformation is provided as an empty string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                gradient: ""
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    gradient: ""
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-gradient/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-gradient`);
     });
 
     it('should generate the correct URL when gradient transformation is set to true', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                gradient: true
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    gradient: true
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-gradient/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-gradient`);
     });
 
     it('should generate the correct URL when AI drop shadow transformation is set to true', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aiDropShadow: true
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aiDropShadow: true
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-dropshadow/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-dropshadow`);
     });
 
     it('should generate the correct URL when AI drop shadow transformation is provided as an empty string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aiDropShadow: ""
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aiDropShadow: ""
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-dropshadow/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-dropshadow`);
     });
 
     it('should generate the correct URL when AI drop shadow transformation is provided with a specific string value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aiDropShadow: "az-45"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aiDropShadow: "az-45"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-dropshadow-az-45/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-dropshadow-az-45`);
     });
 
     it('should generate the correct URL when shadow transformation is set to true', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                shadow: true
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    shadow: true
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-shadow/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-shadow`);
     });
 
     it('should generate the correct URL when shadow transformation is provided as an empty string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                shadow: ""
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    shadow: ""
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-shadow/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-shadow`);
     });
 
     it('should generate the correct URL when shadow transformation is provided with a specific string value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                shadow: "bl-15_st-40_x-10_y-N5"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    shadow: "bl-15_st-40_x-10_y-N5"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-shadow-bl-15_st-40_x-10_y-N5/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-shadow-bl-15_st-40_x-10_y-N5`);
     });
 
     it('should generate the correct URL when sharpen transformation is set to true', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                sharpen: true
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    sharpen: true
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-sharpen/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-sharpen`);
     });
 
     it('should generate the correct URL when sharpen transformation is provided as an empty string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                sharpen: ""
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    sharpen: ""
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-sharpen/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-sharpen`);
     });
 
     it('should generate the correct URL when sharpen transformation is provided with a number value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                sharpen: 10
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    sharpen: 10
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-sharpen-10/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-sharpen-10`);
     });
 
     it('should generate the correct URL when unsharpMask transformation is set to true', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                unsharpMask: true
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    unsharpMask: true
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-usm/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-usm`);
     });
 
     it('should generate the correct URL when unsharpMask transformation is provided as an empty string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                unsharpMask: ""
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    unsharpMask: ""
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-usm/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-usm`);
     });
 
     it('should generate the correct URL when unsharpMask transformation is provided with a string value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                unsharpMask: "2-2-0.8-0.024"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    unsharpMask: "2-2-0.8-0.024"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:e-usm-2-2-0.8-0.024/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=e-usm-2-2-0.8-0.024`);
     });
 
     it('should generate the correct URL for trim transformation when set to true (boolean)', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                trim: true
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    trim: true
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:t-true/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=t-true`);
     });
 
     it('should generate the correct URL for trim transformation when provided as an empty string', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                trim: ""
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    trim: ""
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:t-true/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=t-true`);
     });
 
     it('should generate the correct URL for trim transformation when provided with a number value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                trim: 5
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    trim: 5
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:t-5/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=t-5`);
     });
 
     // Width parameter tests
     it('should generate the correct URL for width transformation when provided with a number value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                width: 400
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    width: 400
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:w-400/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=w-400`);
     });
 
     it('should generate the correct URL for width transformation when provided with a string value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                width: "400"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    width: "400"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:w-400/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=w-400`);
     });
 
     it('should generate the correct URL for width transformation when provided with an arithmetic expression', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                width: "iw_div_2"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    width: "iw_div_2"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:w-iw_div_2/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=w-iw_div_2`);
     });
 
     // Height parameter tests
     it('should generate the correct URL for height transformation when provided with a number value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                height: 300
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    height: 300
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=h-300`);
     });
 
     it('should generate the correct URL for height transformation when provided with a string value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                height: "300"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    height: "300"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=h-300`);
     });
 
     it('should generate the correct URL for height transformation when provided with an arithmetic expression', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                height: "ih_mul_0.5"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    height: "ih_mul_0.5"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-ih_mul_0.5/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=h-ih_mul_0.5`);
     });
 
     // AspectRatio parameter tests
     it('should generate the correct URL for aspectRatio transformation when provided with a string value in colon format', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aspectRatio: "4:3"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aspectRatio: "4:3"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:ar-4:3/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=ar-4:3`);
     });
 
     it('should generate the correct URL for aspectRatio transformation when provided with an alternate underscore format', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aspectRatio: "4_3"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aspectRatio: "4_3"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:ar-4_3/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=ar-4_3`);
     });
 
     it('should generate the correct URL for aspectRatio transformation when provided with an arithmetic expression', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                aspectRatio: "iar_div_2"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    aspectRatio: "iar_div_2"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:ar-iar_div_2/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=ar-iar_div_2`);
     });
 
     // Background parameter tests
     it('should generate the correct URL for background transformation when provided with a solid color', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                background: "FF0000"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    background: "FF0000"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:bg-FF0000/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=bg-FF0000`);
     });
 
     it('should generate the correct URL for background transformation when provided with the blurred option', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                background: "blurred"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    background: "blurred"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:bg-blurred/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=bg-blurred`);
     });
 
     it('should generate the correct URL for background transformation when provided with the genfill option', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                background: "genfill"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    background: "genfill"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:bg-genfill/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=bg-genfill`);
     });
 
     // Crop parameter tests
     it('should generate the correct URL for crop transformation when provided with force value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                crop: "force"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    crop: "force"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:c-force/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=c-force`);
     });
 
     it('should generate the correct URL for crop transformation when provided with at_max value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                crop: "at_max"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    crop: "at_max"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:c-at_max/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=c-at_max`);
     });
 
     // CropMode parameter tests
     it('should generate the correct URL for cropMode transformation when provided with pad_resize', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                cropMode: "pad_resize"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    cropMode: "pad_resize"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:cm-pad_resize/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=cm-pad_resize`);
     });
 
     it('should generate the correct URL for cropMode transformation when provided with extract value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                cropMode: "extract"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    cropMode: "extract"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:cm-extract/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=cm-extract`);
     });
 
     // Focus parameter tests
     it('should generate the correct URL for focus transformation when provided with a string value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                focus: "center"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    focus: "center"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:fo-center/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=fo-center`);
     });
 
     it('should generate the correct URL for focus transformation when face detection is specified', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                focus: "face"
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    focus: "face"
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:fo-face/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=fo-face`);
     });
 
     // Quality parameter test
     it('should generate the correct URL for quality transformation when provided with a number value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                quality: 80
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    quality: 80
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:q-80/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=q-80`);
     });
 
     // Coordinate parameters tests
     it('should generate the correct URL for x coordinate transformation when provided with a number value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                x: 10
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    x: 10
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:x-10/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=x-10`);
     });
 
     it('should generate the correct URL for y coordinate transformation when provided with a number value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                y: 20
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    y: 20
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:y-20/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=y-20`);
     });
 
     it('should generate the correct URL for xCenter transformation when provided with a number value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                xCenter: 30
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    xCenter: 30
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:xc-30/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=xc-30`);
     });
 
     it('should generate the correct URL for yCenter transformation when provided with a number value', function () {
-        const url = imagekit.url({
-            path: "/test_path1.jpg",
-            transformation: [{
-                yCenter: 40
-            }]
-        })
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path1.jpg",
+            transformation: [
+                {
+                    yCenter: 40
+                }
+            ]
+        });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:yc-40/test_path1.jpg`);
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/test_path1.jpg?tr=yc-40`);
     });
 
-    // This is done just to test how SDK constructs URL, the actual transformation is not valid.
     it('Including deprecated properties', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                height: 300,
-                width: 400,
-                aspectRatio: '4-3',
-                quality: 40,
-                crop: 'force',
-                cropMode: 'extract',
-                focus: 'left',
-                format: 'jpeg',
-                radius: 50,
-                bg: "A94D34",
-                border: "5-A94D34",
-                rotation: 90,
-                blur: 10,
-                named: "some_name",
-                progressive: true,
-                lossless: true,
-                trim: 5,
-                metadata: true,
-                colorProfile: true,
-                defaultImage: "/folder/file.jpg/", //trailing and leading slash case 
-                dpr: 3,
-                sharpen: 10,
-                unsharpMask: "2-2-0.8-0.024",
-                contrastStretch: true,
-                grayscale: true,
-                shadow: 'bl-15_st-40_x-10_y-N5',
-                gradient: 'from-red_to-white',
-                original: true,
-                raw: "h-200,w-300,l-image,i-logo.png,l-end"
-            }]
-        })
-
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300,w-400,ar-4-3,q-40,c-force,cm-extract,fo-left,f-jpeg,r-50,bg-A94D34,b-5-A94D34,rt-90,bl-10,n-some_name,pr-true,lo-true,t-5,md-true,cp-true,di-folder@@file.jpg,dpr-3,e-sharpen-10,e-usm-2-2-0.8-0.024,e-contrast,e-grayscale,e-shadow-bl-15_st-40_x-10_y-N5,e-gradient-from-red_to-white,orig-true,h-200,w-300,l-image,i-logo.png,l-end/test_path.jpg`);
-    });
-
-    // This is done just to test how SDK constructs URL, the actual transformation is not valid
-    it('should generate the correct URL when comprehensive transformations, including video and AI transformations, are applied', function () {
-        const url = imagekit.url({
-            path: "/test_path.jpg",
-            transformation: [{
-                height: 300,
-                width: 400,
-                aspectRatio: '4-3',
-                quality: 40,
-                crop: 'force',
-                cropMode: 'extract',
-                focus: 'left',
-                format: 'jpeg',
-                radius: 50,
-                bg: "A94D34",
-                border: "5-A94D34",
-                rotation: 90,
-                blur: 10,
-                named: "some_name",
-                progressive: true,
-                lossless: true,
-                trim: 5,
-                metadata: true,
-                colorProfile: true,
-                defaultImage: "/folder/file.jpg/", //trailing and leading slash case 
-                dpr: 3,
-                x: 10,
-                y: 20,
-                xCenter: 30,
-                yCenter: 40,
-                flip: "h",
-                opacity: 0.8,
-                zoom: 2,
-                // Video transformations
-                videoCodec: "h264",
-                audioCodec: "aac",
-                startOffset: 5,
-                endOffset: 15,
-                duration: 10,
-                streamingResolutions: ["1440", "1080"],
-                // AI transformations
-                grayscale: true,
-                aiUpscale: true,
-                aiRetouch: true,
-                aiVariation: true,
-                aiDropShadow: true,
-                aiChangeBackground: "prompt-car",
-                aiRemoveBackground: true,
-                contrastStretch: true,
-                shadow: 'bl-15_st-40_x-10_y-N5',
-                sharpen: 10,
-                unsharpMask: "2-2-0.8-0.024",
-                gradient: 'from-red_to-white',
-                original: true,
-                page: "2_4",
-                raw: "h-200,w-300,l-image,i-logo.png,l-end"
-            }]
-        })
-
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:h-300,w-400,ar-4-3,q-40,c-force,cm-extract,fo-left,f-jpeg,r-50,bg-A94D34,b-5-A94D34,rt-90,bl-10,n-some_name,pr-true,lo-true,t-5,md-true,cp-true,di-folder@@file.jpg,dpr-3,x-10,y-20,xc-30,yc-40,fl-h,o-0.8,z-2,vc-h264,ac-aac,so-5,eo-15,du-10,sr-1440_1080,e-grayscale,e-upscale,e-retouch,e-genvar,e-dropshadow,e-changebg-prompt-car,e-bgremove,e-contrast,e-shadow-bl-15_st-40_x-10_y-N5,e-sharpen-10,e-usm-2-2-0.8-0.024,e-gradient-from-red_to-white,orig-true,pg-2_4,h-200,w-300,l-image,i-logo.png,l-end/test_path.jpg`);
+        // This is just testing how the SDK constructs the URL, not actual valid transformations.
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: 300,
+                    width: 400,
+                    aspectRatio: '4-3',
+                    quality: 40,
+                    crop: 'force',
+                    cropMode: 'extract',
+                    focus: 'left',
+                    format: 'jpeg',
+                    radius: 50,
+                    bg: "A94D34",
+                    border: "5-A94D34",
+                    rotation: 90,
+                    blur: 10,
+                    named: "some_name",
+                    progressive: true,
+                    lossless: true,
+                    trim: 5,
+                    metadata: true,
+                    colorProfile: true,
+                    defaultImage: "/folder/file.jpg/",
+                    dpr: 3,
+                    sharpen: 10,
+                    unsharpMask: "2-2-0.8-0.024",
+                    contrastStretch: true,
+                    grayscale: true,
+                    shadow: "bl-15_st-40_x-10_y-N5",
+                    gradient: "from-red_to-white",
+                    original: true,
+                    raw: "h-200,w-300,l-image,i-logo.png,l-end"
+                }
+            ]
+        });
+
+        expect(url).equal(
+            `https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400,ar-4-3,q-40,c-force,cm-extract,fo-left,f-jpeg,r-50,bg-A94D34,b-5-A94D34,rt-90,bl-10,n-some_name,pr-true,lo-true,t-5,md-true,cp-true,di-folder@@file.jpg,dpr-3,e-sharpen-10,e-usm-2-2-0.8-0.024,e-contrast,e-grayscale,e-shadow-bl-15_st-40_x-10_y-N5,e-gradient-from-red_to-white,orig-true,h-200,w-300,l-image,i-logo.png,l-end`
+        );
+    });
+
+    it('should generate the correct URL with many transformations, including video and AI transforms', function () {
+        // Example test with comprehensive transformations
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            transformationPosition: "query",
+            src: "/test_path.jpg",
+            transformation: [
+                {
+                    height: 300,
+                    width: 400,
+                    aspectRatio: '4-3',
+                    quality: 40,
+                    crop: 'force',
+                    cropMode: 'extract',
+                    focus: 'left',
+                    format: 'jpeg',
+                    radius: 50,
+                    bg: "A94D34",
+                    border: "5-A94D34",
+                    rotation: 90,
+                    blur: 10,
+                    named: "some_name",
+                    progressive: true,
+                    lossless: true,
+                    trim: 5,
+                    metadata: true,
+                    colorProfile: true,
+                    defaultImage: "/folder/file.jpg/",
+                    dpr: 3,
+                    x: 10,
+                    y: 20,
+                    xCenter: 30,
+                    yCenter: 40,
+                    flip: "h",
+                    opacity: 0.8,
+                    zoom: 2,
+                    // Video transformations
+                    videoCodec: "h264",
+                    audioCodec: "aac",
+                    startOffset: 5,
+                    endOffset: 15,
+                    duration: 10,
+                    streamingResolutions: ["1440", "1080"],
+                    // AI transformations
+                    grayscale: true,
+                    aiUpscale: true,
+                    aiRetouch: true,
+                    aiVariation: true,
+                    aiDropShadow: true,
+                    aiChangeBackground: "prompt-car",
+                    aiRemoveBackground: true,
+                    contrastStretch: true,
+                    shadow: "bl-15_st-40_x-10_y-N5",
+                    sharpen: 10,
+                    unsharpMask: "2-2-0.8-0.024",
+                    gradient: "from-red_to-white",
+                    original: true,
+                    page: "2_4",
+                    raw: "h-200,w-300,l-image,i-logo.png,l-end"
+                }
+            ]
+        });
+
+        expect(url).equal(
+            `https://ik.imagekit.io/test_url_endpoint/test_path.jpg?tr=h-300,w-400,ar-4-3,q-40,c-force,cm-extract,fo-left,f-jpeg,r-50,bg-A94D34,b-5-A94D34,rt-90,bl-10,n-some_name,pr-true,lo-true,t-5,md-true,cp-true,di-folder@@file.jpg,dpr-3,x-10,y-20,xc-30,yc-40,fl-h,o-0.8,z-2,vc-h264,ac-aac,so-5,eo-15,du-10,sr-1440_1080,e-grayscale,e-upscale,e-retouch,e-genvar,e-dropshadow,e-changebg-prompt-car,e-bgremove,e-contrast,e-shadow-bl-15_st-40_x-10_y-N5,e-sharpen-10,e-usm-2-2-0.8-0.024,e-gradient-from-red_to-white,orig-true,pg-2_4,h-200,w-300,l-image,i-logo.png,l-end`
+        );
     });
 });
diff --git a/test/url-generation/buildtransformationString.js b/test/url-generation/buildtransformationString.js
new file mode 100644
index 0000000..f116b2e
--- /dev/null
+++ b/test/url-generation/buildtransformationString.js
@@ -0,0 +1,26 @@
+const { buildTransformationString } = require("../../src/index");
+const { expect } = require('chai');
+
+describe('buildTransformationString', function () {
+  it('should return an empty string when no transformations are provided', function () {
+    const result = buildTransformationString([{}]);
+    expect(result).to.equal('');
+  });
+
+  it('should generate a transformation string for width only', function () {
+    const result = buildTransformationString([{ width: 300 }]);
+    expect(result).to.equal('w-300');
+  });
+
+  it('should generate a transformation string for multiple transformations', function () {
+    const result = buildTransformationString([
+      {
+        overlay: {
+          type: 'text',
+          text: 'Hello',
+        }
+      }
+    ]);
+    expect(result).to.equal('l-text,i-Hello,l-end');
+  });
+});
diff --git a/test/url-generation/overlay.js b/test/url-generation/overlay.js
index 52f67b4..0ade645 100644
--- a/test/url-generation/overlay.js
+++ b/test/url-generation/overlay.js
@@ -1,14 +1,15 @@
 const chai = require("chai");
 const expect = chai.expect;
-const initializationParams = require("../data").initializationParams;
-import ImageKit from "../../src/index";
+import { buildSrc } from "../../src/index";
 import { safeBtoa } from "../../src/utils/transformation";
+
 describe("Overlay Transformation Test Cases", function () {
-    const imagekit = new ImageKit(initializationParams);
 
     it('Ignore invalid values if text is missing', function () {
-        const url = imagekit.url({
-            path: "/base-image.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-image.jpg",
             transformation: [{
                 overlay: {
                     type: "text"
@@ -18,9 +19,24 @@ describe("Overlay Transformation Test Cases", function () {
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/base-image.jpg`);
     });
 
-    it('Ignore invalid values if input', function () {
-        const url = imagekit.url({
-            path: "/base-image.jpg",
+    it('Ignore if type is missing', function () {
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-image.jpg",
+            transformation: [{
+                overlay: {
+                }
+            }]
+        });
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/base-image.jpg`);
+    });
+
+    it('Ignore invalid values if input (image)', function () {
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-image.jpg",
             transformation: [{
                 overlay: {
                     type: "image"
@@ -30,9 +46,11 @@ describe("Overlay Transformation Test Cases", function () {
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/base-image.jpg`);
     });
 
-    it('Ignore invalid values if input', function () {
-        const url = imagekit.url({
-            path: "/base-image.jpg",
+    it('Ignore invalid values if input (video)', function () {
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-image.jpg",
             transformation: [{
                 overlay: {
                     type: "video"
@@ -42,9 +60,11 @@ describe("Overlay Transformation Test Cases", function () {
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/base-image.jpg`);
     });
 
-    it('Ignore invalid values if input', function () {
-        const url = imagekit.url({
-            path: "/base-image.jpg",
+    it('Ignore invalid values if input (subtitle)', function () {
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-image.jpg",
             transformation: [{
                 overlay: {
                     type: "subtitle"
@@ -54,9 +74,11 @@ describe("Overlay Transformation Test Cases", function () {
         expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/base-image.jpg`);
     });
 
-    it('Ignore invalid values if color is missing', function () {
-        const url = imagekit.url({
-            path: "/base-image.jpg",
+    it('Ignore invalid values if color is missing (solidColor)', function () {
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-image.jpg",
             transformation: [{
                 overlay: {
                     type: "solidColor"
@@ -67,8 +89,10 @@ describe("Overlay Transformation Test Cases", function () {
     });
 
     it('Text overlay generates correct URL with encoded overlay text', function () {
-        const url = imagekit.url({
-            path: "/base-image.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-image.jpg",
             transformation: [{
                 overlay: {
                     type: "text",
@@ -80,8 +104,10 @@ describe("Overlay Transformation Test Cases", function () {
     });
 
     it('Image overlay generates correct URL with input logo.png', function () {
-        const url = imagekit.url({
-            path: "/base-image.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-image.jpg",
             transformation: [{
                 overlay: {
                     type: "image",
@@ -93,8 +119,10 @@ describe("Overlay Transformation Test Cases", function () {
     });
 
     it('Video overlay generates correct URL with input play-pause-loop.mp4', function () {
-        const url = imagekit.url({
-            path: "/base-video.mp4",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-video.mp4",
             transformation: [{
                 overlay: {
                     type: "video",
@@ -106,8 +134,10 @@ describe("Overlay Transformation Test Cases", function () {
     });
 
     it("Subtitle overlay generates correct URL with input subtitle.srt", function () {
-        const url = imagekit.url({
-            path: "/base-video.mp4",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-video.mp4",
             transformation: [{
                 overlay: {
                     type: "subtitle",
@@ -119,8 +149,10 @@ describe("Overlay Transformation Test Cases", function () {
     });
 
     it("Solid color overlay generates correct URL with background color FF0000", function () {
-        const url = imagekit.url({
-            path: "/base-image.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-image.jpg",
             transformation: [{
                 overlay: {
                     type: "solidColor",
@@ -132,8 +164,10 @@ describe("Overlay Transformation Test Cases", function () {
     });
 
     it('Combined overlay transformations generate correct URL including nested overlays', function () {
-        const url = imagekit.url({
-            path: "/base-image.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/test_url_endpoint",
+            src: "/base-image.jpg",
             transformation: [
                 {
                     // Text overlay
@@ -197,7 +231,7 @@ describe("Overlay Transformation Test Cases", function () {
                     }
                 },
                 {
-                    // Video overlay. Just for url generation testing, you can't overlay a video on an image.
+                    // Video overlay. Just for URL generation testing, you can't actually overlay a video on an image.
                     overlay: {
                         type: "video",
                         input: "play-pause-loop.mp4",
@@ -220,7 +254,7 @@ describe("Overlay Transformation Test Cases", function () {
                     }
                 },
                 {
-                    // Subtitle overlay. Just for url generation testing, you can't overlay a subtitle on an image.
+                    // Subtitle overlay. Just for URL generation testing, you can't actually overlay a subtitle on an image.
                     overlay: {
                         type: "subtitle",
                         input: "subtitle.srt",
@@ -268,20 +302,17 @@ describe("Overlay Transformation Test Cases", function () {
             ]
         });
 
-        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:l-text,i-${encodeURIComponent("Every thing")},lx-10,ly-20,lfo-center,lso-5,leo-15,ldu-10,w-bw_mul_0.5,fs-20,ff-Arial,co-0000ff,ia-left,pa-5,al-7,tg-b,bg-red,r-10,rt-N45,fl-h,lh-20,l-end:l-image,i-logo.png,lx-10,ly-20,lfo-center,lso-5,leo-15,ldu-10,w-bw_mul_0.5,h-bh_mul_0.5,rt-N45,fl-h,l-text,i-${encodeURIComponent("Nested text overlay")},l-end,l-end:l-video,i-play-pause-loop.mp4,lx-10,ly-20,lfo-center,lso-5,leo-15,ldu-10,l-end:l-subtitle,i-subtitle.srt,lx-10,ly-20,lfo-center,lso-5,leo-15,ldu-10,l-end:l-image,i-ik_canvas,bg-FF0000,lx-10,ly-20,lfo-center,lso-5,leo-15,ldu-10,w-bw_mul_0.5,h-bh_mul_0.5,rt-N45,fl-h,l-end/base-image.jpg`)
+        expect(url).equal(`https://ik.imagekit.io/test_url_endpoint/tr:l-text,i-${encodeURIComponent("Every thing")},lx-10,ly-20,lfo-center,lso-5,leo-15,ldu-10,w-bw_mul_0.5,fs-20,ff-Arial,co-0000ff,ia-left,pa-5,al-7,tg-b,bg-red,r-10,rt-N45,fl-h,lh-20,l-end:l-image,i-logo.png,lx-10,ly-20,lfo-center,lso-5,leo-15,ldu-10,w-bw_mul_0.5,h-bh_mul_0.5,rt-N45,fl-h,l-text,i-${encodeURIComponent("Nested text overlay")},l-end,l-end:l-video,i-play-pause-loop.mp4,lx-10,ly-20,lfo-center,lso-5,leo-15,ldu-10,l-end:l-subtitle,i-subtitle.srt,lx-10,ly-20,lfo-center,lso-5,leo-15,ldu-10,l-end:l-image,i-ik_canvas,bg-FF0000,lx-10,ly-20,lfo-center,lso-5,leo-15,ldu-10,w-bw_mul_0.5,h-bh_mul_0.5,rt-N45,fl-h,l-end/base-image.jpg`);
     });
 });
 
-
 describe("Overlay encoding test cases", function () {
-    const imagekit = new ImageKit({
-        ...initializationParams,
-        urlEndpoint: "https://ik.imagekit.io/demo", // Using real url to test correctness quickly by clicking link
-    });
-
     it('Nested simple path, should use i instead of ie, handle slash properly', function () {
-        const url = imagekit.url({
-            path: "/medium_cafe_B1iTdD0C.jpg",
+        const url = buildSrc({
+            // Using a different endpoint here, as we are checking for /demo
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/medium_cafe_B1iTdD0C.jpg",
             transformation: [{
                 overlay: {
                     type: "image",
@@ -293,8 +324,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Nested non-simple path, should use ie instead of i', function () {
-        const url = imagekit.url({
-            path: "/medium_cafe_B1iTdD0C.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/medium_cafe_B1iTdD0C.jpg",
             transformation: [{
                 overlay: {
                     type: "image",
@@ -306,8 +339,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Simple text overlay, should use i instead of ie', function () {
-        const url = imagekit.url({
-            path: "/medium_cafe_B1iTdD0C.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/medium_cafe_B1iTdD0C.jpg",
             transformation: [{
                 overlay: {
                     type: "text",
@@ -319,8 +354,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Simple text overlay with spaces and other safe characters, should use i instead of ie', function () {
-        const url = imagekit.url({
-            path: "/medium_cafe_B1iTdD0C.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/medium_cafe_B1iTdD0C.jpg",
             transformation: [{
                 overlay: {
                     type: "text",
@@ -332,8 +369,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Non simple text overlay, should use ie instead of i', function () {
-        const url = imagekit.url({
-            path: "/medium_cafe_B1iTdD0C.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/medium_cafe_B1iTdD0C.jpg",
             transformation: [{
                 overlay: {
                     type: "text",
@@ -345,8 +384,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Text overlay with explicit plain encoding', function () {
-        const url = imagekit.url({
-            path: "/sample.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/sample.jpg",
             transformation: [{
                 overlay: {
                     type: "text",
@@ -359,8 +400,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Text overlay with explicit base64 encoding', function () {
-        const url = imagekit.url({
-            path: "/sample.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/sample.jpg",
             transformation: [{
                 overlay: {
                     type: "text",
@@ -373,8 +416,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Image overlay with explicit plain encoding', function () {
-        const url = imagekit.url({
-            path: "/sample.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/sample.jpg",
             transformation: [{
                 overlay: {
                     type: "image",
@@ -387,8 +432,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Image overlay with explicit base64 encoding', function () {
-        const url = imagekit.url({
-            path: "/sample.jpg",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/sample.jpg",
             transformation: [{
                 overlay: {
                     type: "image",
@@ -401,8 +448,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Video overlay with explicit base64 encoding', function () {
-        const url = imagekit.url({
-            path: "/sample.mp4",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/sample.mp4",
             transformation: [{
                 overlay: {
                     type: "video",
@@ -415,8 +464,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Subtitle overlay with explicit plain encoding', function () {
-        const url = imagekit.url({
-            path: "/sample.mp4",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/sample.mp4",
             transformation: [{
                 overlay: {
                     type: "subtitle",
@@ -429,8 +480,10 @@ describe("Overlay encoding test cases", function () {
     });
 
     it('Subtitle overlay with explicit base64 encoding', function () {
-        const url = imagekit.url({
-            path: "/sample.mp4",
+        const url = buildSrc({
+            transformationPosition: "path",
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/sample.mp4",
             transformation: [{
                 overlay: {
                     type: "subtitle",
@@ -443,8 +496,9 @@ describe("Overlay encoding test cases", function () {
     });
 
     it("Avoid double encoding when transformation string is in query params", function () {
-        const url = imagekit.url({
-            path: "/sample.jpg",
+        const url = buildSrc({
+            urlEndpoint: "https://ik.imagekit.io/demo",
+            src: "/sample.jpg",
             transformation: [{
                 overlay: {
                     type: "text",
